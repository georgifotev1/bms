basePath: /v1
definitions:
  main.BrandResponse:
    properties:
      address:
        type: string
      bannerUrl:
        type: string
      city:
        type: string
      country:
        type: string
      createdAt:
        type: string
      currency:
        type: string
      description:
        type: string
      email:
        type: string
      id:
        type: integer
      logoUrl:
        type: string
      name:
        type: string
      pageUrl:
        type: string
      phone:
        type: string
      state:
        type: string
      updatedAt:
        type: string
      zipCode:
        type: string
    type: object
  main.CreateBrandPayload:
    properties:
      name:
        maxLength: 100
        minLength: 3
        type: string
    required:
    - name
    type: object
  main.CreateServicePayload:
    properties:
      buffer_time:
        type: integer
      cost:
        type: string
      description:
        type: string
      duration:
        type: integer
      image_url:
        type: string
      is_visible:
        type: boolean
      title:
        maxLength: 100
        minLength: 3
        type: string
      user_ids:
        items:
          type: integer
        type: array
    required:
    - duration
    - title
    type: object
  main.CreateUserTokenPayload:
    properties:
      email:
        maxLength: 255
        type: string
      password:
        maxLength: 72
        minLength: 3
        type: string
    required:
    - email
    - password
    type: object
  main.CustomerResponse:
    properties:
      brandId:
        type: integer
      createdAt:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      phoneNumber:
        type: string
      token:
        type: string
      updatedAt:
        type: string
    type: object
  main.InviteUserPayload:
    properties:
      email:
        type: string
      username:
        maxLength: 100
        minLength: 2
        type: string
    required:
    - email
    - username
    type: object
  main.LoginCustomerPayload:
    properties:
      brandId:
        minimum: 1
        type: integer
      email:
        type: string
      password:
        maxLength: 72
        minLength: 3
        type: string
    required:
    - brandId
    - email
    - password
    type: object
  main.RegisterCustomerPayload:
    properties:
      brandId:
        minimum: 1
        type: integer
      email:
        type: string
      password:
        maxLength: 72
        minLength: 3
        type: string
      phoneNumber:
        type: string
      username:
        maxLength: 100
        minLength: 2
        type: string
    required:
    - brandId
    - email
    - password
    - username
    type: object
  main.RegisterUserPayload:
    properties:
      email:
        type: string
      password:
        maxLength: 72
        minLength: 3
        type: string
      username:
        maxLength: 100
        minLength: 2
        type: string
    required:
    - email
    - password
    - username
    type: object
  main.ServiceResponse:
    properties:
      brandId:
        type: integer
      bufferTime:
        type: integer
      cost:
        type: string
      createdAt:
        type: string
      description:
        type: string
      duration:
        type: integer
      id:
        type: string
      imageUrl:
        type: string
      isVisible:
        type: boolean
      providers:
        items:
          type: integer
        type: array
      title:
        type: string
      updatedAt:
        type: string
    type: object
  main.UserResponse:
    properties:
      avatar:
        type: string
      brandId:
        type: integer
      createdAt:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      role:
        type: string
      updatedAt:
        type: string
      verified:
        type: boolean
    type: object
  main.UserWithToken:
    properties:
      avatar:
        type: string
      brandId:
        type: integer
      createdAt:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      role:
        type: string
      token:
        type: string
      updatedAt:
        type: string
      verified:
        type: boolean
    type: object
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: API for Booking System
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Booking System
paths:
  /auth/logout:
    post:
      description: Clears the refresh token cookie to log out the user
      produces:
      - application/json
      responses:
        "200":
          description: Logged out successfully
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema: {}
      summary: Logs out a user
      tags:
      - auth
  /auth/refresh:
    get:
      description: Uses a refresh token to generate a new access token
      produces:
      - application/json
      responses:
        "200":
          description: New access token
          schema:
            type: string
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Refreshes an access token
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Registers a user
      parameters:
      - description: User credentials
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.RegisterUserPayload'
      produces:
      - application/json
      responses:
        "201":
          description: User registered
          schema:
            $ref: '#/definitions/main.UserResponse'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Registers a user
      tags:
      - auth
  /auth/token:
    post:
      consumes:
      - application/json
      description: Creates a token for a user
      parameters:
      - description: User credentials
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.CreateUserTokenPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Token
          schema:
            type: string
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Creates a token
      tags:
      - auth
  /brand:
    post:
      consumes:
      - application/json
      description: Creates a new brand and associates it with the owner user
      parameters:
      - description: Brand creation data
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.CreateBrandPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created brand
          schema:
            $ref: '#/definitions/main.BrandResponse'
        "400":
          description: Bad request - Invalid input
          schema: {}
        "401":
          description: Unauthorized - Invalid or missing token
          schema: {}
        "403":
          description: Forbidden - User is not an owner
          schema: {}
        "409":
          description: Conflict - Brand already exists
          schema: {}
        "500":
          description: Internal server error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Create a new brand
      tags:
      - brand
  /customers/auth/login:
    post:
      consumes:
      - application/json
      description: Login a customer
      parameters:
      - description: User credentials
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.LoginCustomerPayload'
      produces:
      - application/json
      responses:
        "201":
          description: User logged in
          schema:
            $ref: '#/definitions/main.CustomerResponse'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Login a customer
      tags:
      - auth
  /customers/auth/register:
    post:
      consumes:
      - application/json
      description: Registers a customer
      parameters:
      - description: User credentials
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.RegisterCustomerPayload'
      produces:
      - application/json
      responses:
        "201":
          description: User registered
          schema:
            $ref: '#/definitions/main.CustomerResponse'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Registers a customer
      tags:
      - auth
  /health:
    get:
      description: Healthcheck endpoint
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
      summary: Healthcheck
      tags:
      - ops
  /service:
    post:
      consumes:
      - application/json
      description: Creates a new service for a brand and assigns it to specified providers
      parameters:
      - description: Service creation data
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.CreateServicePayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created service
          schema:
            $ref: '#/definitions/main.ServiceResponse'
        "400":
          description: Bad request - Invalid input
          schema: {}
        "401":
          description: Unauthorized - Invalid or missing token
          schema: {}
        "403":
          description: Forbidden - User does not belong to a brand
          schema: {}
        "404":
          description: Not found - One or more providers not found
          schema: {}
        "500":
          description: Internal server error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Create a new service
      tags:
      - service
  /users/{id}:
    get:
      consumes:
      - application/json
      description: Fetches a user profile by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.UserResponse'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Fetches a user profile
      tags:
      - users
  /users/confirm/{token}:
    get:
      consumes:
      - application/json
      description: Activates a user account using the token sent in the activation
        email
      parameters:
      - description: Activation token
        in: path
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: User activated
          schema:
            type: string
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Activate a user account
      tags:
      - users
  /users/invite:
    post:
      consumes:
      - application/json
      description: Invites a new user by creating an account and sending an activation
        email
      parameters:
      - description: User invitation details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/main.InviteUserPayload'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully with invitation token
          schema:
            $ref: '#/definitions/main.UserWithToken'
        "400":
          description: Bad request - validation error or user already exists
          schema: {}
        "403":
          description: Forbidden - only owner role can invite users
          schema: {}
        "500":
          description: Internal server error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Invite a new user
      tags:
      - users
  /users/me:
    get:
      consumes:
      - application/json
      description: Fetches a user token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.UserResponse'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Get user by token
      tags:
      - users
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
