basePath: /v1
definitions:
  main.CreateBrandPayload:
    properties:
      name:
        maxLength: 100
        minLength: 3
        type: string
    required:
    - name
    type: object
  main.CreateEventPayload:
    properties:
      brandId:
        minimum: 0
        type: integer
      comment:
        type: string
      customerId:
        minimum: 0
        type: integer
      endTime:
        type: string
      serviceId:
        type: string
      startTime:
        type: string
      userId:
        minimum: 0
        type: integer
    required:
    - brandId
    - customerId
    - endTime
    - serviceId
    - startTime
    - userId
    type: object
  main.CreateGuestCustomerPayload:
    properties:
      email:
        type: string
      name:
        maxLength: 100
        minLength: 2
        type: string
      phoneNumber:
        type: string
    required:
    - name
    - phoneNumber
    type: object
  main.CreateServicePayload:
    properties:
      bufferTime:
        type: integer
      cost:
        type: string
      description:
        type: string
      duration:
        type: integer
      imageURL:
        type: string
      isVisible:
        type: boolean
      title:
        maxLength: 100
        minLength: 3
        type: string
      userIDs:
        items:
          type: integer
        type: array
    required:
    - duration
    - title
    type: object
  main.CustomerResponse:
    properties:
      brandId:
        type: integer
      createdAt:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      phoneNumber:
        type: string
      updatedAt:
        type: string
    type: object
  main.EventResponse:
    properties:
      brandId:
        type: integer
      bufferTime:
        type: integer
      comment:
        type: string
      cost:
        type: string
      createdAt:
        type: string
      customerId:
        type: integer
      customerName:
        type: string
      endTime:
        type: string
      id:
        type: integer
      serviceId:
        type: string
      serviceName:
        type: string
      startTime:
        type: string
      updatedAt:
        type: string
      userId:
        type: integer
      userName:
        type: string
    type: object
  main.InviteUserPayload:
    properties:
      email:
        type: string
      username:
        maxLength: 100
        minLength: 2
        type: string
    required:
    - email
    - username
    type: object
  main.ServiceResponse:
    properties:
      brandId:
        type: integer
      bufferTime:
        type: integer
      cost:
        type: string
      createdAt:
        type: string
      description:
        type: string
      duration:
        type: integer
      id:
        type: string
      imageUrl:
        type: string
      isVisible:
        type: boolean
      providers:
        items:
          type: integer
        type: array
      title:
        type: string
      updatedAt:
        type: string
    type: object
  main.SignInCustomerPayload:
    properties:
      email:
        type: string
      password:
        maxLength: 72
        minLength: 3
        type: string
    required:
    - email
    - password
    type: object
  main.SignInUserPayload:
    properties:
      email:
        maxLength: 255
        type: string
      password:
        maxLength: 72
        minLength: 3
        type: string
    required:
    - email
    - password
    type: object
  main.SignUpCustomerPayload:
    properties:
      email:
        type: string
      name:
        maxLength: 100
        minLength: 2
        type: string
      password:
        maxLength: 72
        minLength: 3
        type: string
      phoneNumber:
        type: string
    required:
    - email
    - name
    - password
    - phoneNumber
    type: object
  main.SignUpUserPayload:
    properties:
      email:
        type: string
      password:
        maxLength: 72
        minLength: 3
        type: string
      username:
        maxLength: 100
        minLength: 2
        type: string
    required:
    - email
    - password
    - username
    type: object
  main.UpdateBrandPayload:
    properties:
      address:
        type: string
      bannerUrl:
        type: string
      city:
        type: string
      country:
        type: string
      currency:
        type: string
      description:
        type: string
      email:
        type: string
      logoUrl:
        type: string
      name:
        maxLength: 100
        minLength: 3
        type: string
      pageUrl:
        type: string
      phone:
        type: string
      state:
        type: string
      zipCode:
        type: string
    required:
    - name
    - pageUrl
    type: object
  main.UpdateBrandSocialLink:
    properties:
      platform:
        type: string
      url:
        type: string
    required:
    - platform
    - url
    type: object
  main.UpdateBrandSocialLinksPayload:
    properties:
      socialLinks:
        items:
          $ref: '#/definitions/main.UpdateBrandSocialLink'
        type: array
    type: object
  main.UpdateBrandWorkingHours:
    properties:
      closeTime:
        type: string
      dayOfWeek:
        maximum: 6
        minimum: 0
        type: integer
      isClosed:
        type: boolean
      openTime:
        type: string
    required:
    - dayOfWeek
    type: object
  main.UpdateBrandWorkingHoursPayload:
    properties:
      workingHours:
        items:
          $ref: '#/definitions/main.UpdateBrandWorkingHours'
        type: array
    type: object
  main.UserResponse:
    properties:
      avatar:
        type: string
      brandId:
        type: integer
      createdAt:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      role:
        type: string
      updatedAt:
        type: string
      verified:
        type: boolean
    type: object
  main.UserWithToken:
    properties:
      avatar:
        type: string
      brandId:
        type: integer
      createdAt:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      role:
        type: string
      token:
        type: string
      updatedAt:
        type: string
      verified:
        type: boolean
    type: object
  store.BrandResponse:
    properties:
      address:
        type: string
      bannerUrl:
        type: string
      city:
        type: string
      country:
        type: string
      createdAt:
        type: string
      currency:
        type: string
      description:
        type: string
      email:
        type: string
      id:
        type: integer
      logoUrl:
        type: string
      name:
        type: string
      pageUrl:
        type: string
      phone:
        type: string
      socialLinks:
        items:
          $ref: '#/definitions/store.SocialLink'
        type: array
      state:
        type: string
      updatedAt:
        type: string
      workingHours:
        items:
          $ref: '#/definitions/store.WorkingHour'
        type: array
      zipCode:
        type: string
    type: object
  store.SocialLink:
    properties:
      brandId:
        type: integer
      createdAt:
        type: string
      displayName:
        type: string
      platform:
        type: string
      updatedAt:
        type: string
      url:
        type: string
    type: object
  store.WorkingHour:
    properties:
      brandId:
        type: integer
      closeTime:
        type: string
      createdAt:
        type: string
      dayOfWeek:
        type: integer
      id:
        type: integer
      isClosed:
        type: boolean
      openTime:
        type: string
      updatedAt:
        type: string
    type: object
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: API for Event Managing System
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Event Managing System
paths:
  /admin/images:
    get:
      description: Retrieves a brand's stored images.
      produces:
      - application/json
      responses:
        "200":
          description: Brand images
          schema:
            items:
              type: string
            type: array
        "400":
          description: Bad request - Invalid brand ID
          schema: {}
        "500":
          description: Internal server error
          schema: {}
      summary: Get the images of the brand from bucket
      tags:
      - admin
  /auth/logout:
    post:
      description: Clears the session cookie to log out the user
      produces:
      - application/json
      responses:
        "200":
          description: Logged out successfully
          schema:
            type: string
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Logs out a user
      tags:
      - auth
  /auth/signin:
    post:
      consumes:
      - application/json
      description: Sign in user
      parameters:
      - description: User credentials
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.SignInUserPayload'
      produces:
      - application/json
      responses:
        "200":
          description: User data
          schema:
            type: string
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Sign in user
      tags:
      - auth
  /auth/signup:
    post:
      consumes:
      - application/json
      description: Registers a user
      parameters:
      - description: User credentials
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.SignUpUserPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Register a new user
          schema:
            $ref: '#/definitions/main.UserResponse'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Registers a user
      tags:
      - auth
  /brand:
    post:
      consumes:
      - application/json
      description: Creates a new brand and associates it with the owner user
      parameters:
      - description: Brand creation data
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.CreateBrandPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created brand
          schema:
            $ref: '#/definitions/store.BrandResponse'
        "400":
          description: Bad request - Invalid input
          schema: {}
        "401":
          description: Unauthorized - Invalid or missing token
          schema: {}
        "403":
          description: Forbidden - User is not an owner
          schema: {}
        "409":
          description: Conflict - Brand already exists
          schema: {}
        "500":
          description: Internal server error
          schema: {}
      security:
      - CookieAuth: []
      summary: Create a new brand
      tags:
      - brand
  /brand/{id}:
    get:
      description: Retrieves a brand's details by its unique ID
      parameters:
      - description: Brand ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Brand details
          schema:
            $ref: '#/definitions/store.BrandResponse'
        "400":
          description: Bad request - Invalid brand ID
          schema: {}
        "500":
          description: Internal server error
          schema: {}
      summary: Get brand by ID
      tags:
      - brand
    put:
      consumes:
      - application/json
      description: Update the brand profile, working hours and social links
      parameters:
      - description: Brand data
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.UpdateBrandPayload'
      - description: Brand ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Updated brand
          schema:
            $ref: '#/definitions/store.BrandResponse'
        "400":
          description: Bad request - Invalid input
          schema: {}
        "401":
          description: Unauthorized - Invalid or missing token
          schema: {}
        "500":
          description: Internal server error
          schema: {}
      security:
      - CookieAuth: []
      summary: Update brand
      tags:
      - brand
  /brand/{id}/social-links:
    put:
      consumes:
      - application/json
      description: Update the social media links for a brand
      parameters:
      - description: Social links data
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.UpdateBrandSocialLinksPayload'
      - description: Brand ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Updated brand with social links
          schema:
            $ref: '#/definitions/store.BrandResponse'
        "400":
          description: Bad request - Invalid input
          schema: {}
        "401":
          description: Unauthorized - Invalid or missing token
          schema: {}
        "500":
          description: Internal server error
          schema: {}
      security:
      - CookieAuth: []
      summary: Update brand social links
      tags:
      - brand
  /brand/{id}/working-hours:
    put:
      consumes:
      - application/json
      description: Update the working hours for a brand
      parameters:
      - description: Working hours data
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.UpdateBrandWorkingHoursPayload'
      - description: Brand ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Updated brand with working hours
          schema:
            $ref: '#/definitions/store.BrandResponse'
        "400":
          description: Bad request - Invalid input
          schema: {}
        "401":
          description: Unauthorized - Invalid or missing token
          schema: {}
        "500":
          description: Internal server error
          schema: {}
      security:
      - CookieAuth: []
      summary: Update brand working hours
      tags:
      - brand
  /brand/public:
    get:
      description: Retrieves a brand's details by its unique ID
      parameters:
      - description: Brand ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Brand details
          schema:
            $ref: '#/definitions/store.BrandResponse'
        "400":
          description: Bad request - Invalid brand ID
          schema: {}
        "500":
          description: Internal server error
          schema: {}
      summary: Get brand by url
      tags:
      - brand
  /customers:
    get:
      consumes:
      - application/json
      description: Fetches all customers of a brand
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/main.CustomerResponse'
            type: array
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - CookieAuth: []
      summary: Get customers by brand
      tags:
      - customers
  /customers/auth/logout:
    post:
      description: Clears the refresh token cookie to log out the customer
      produces:
      - application/json
      responses:
        "200":
          description: Logged out successfully
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema: {}
      summary: Logs out a customer
      tags:
      - customers
  /customers/auth/signin:
    post:
      consumes:
      - application/json
      description: Login a customer
      parameters:
      - description: customer credentials
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.SignInCustomerPayload'
      - default: "1"
        description: Brand ID header for development. In production this header is
          ignored
        in: header
        name: X-Brand-ID
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: customer logged in
          schema:
            $ref: '#/definitions/main.CustomerResponse'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Login a customer
      tags:
      - customers
  /customers/auth/signup:
    post:
      consumes:
      - application/json
      description: Registers a customer
      parameters:
      - description: customer credentials
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.SignUpCustomerPayload'
      - default: "1"
        description: Brand ID header for development. In production this header is
          ignored
        in: header
        name: X-Brand-ID
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: customer registered
          schema:
            $ref: '#/definitions/main.CustomerResponse'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Registers a customer
      tags:
      - customers
  /customers/guest:
    post:
      consumes:
      - application/json
      description: Create or get a guest
      parameters:
      - description: guest credentials
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.CreateGuestCustomerPayload'
      - default: "1"
        description: Brand ID header for development. In production this header is
          ignored
        in: header
        name: X-Brand-ID
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: guest already exists
          schema:
            $ref: '#/definitions/main.CustomerResponse'
        "201":
          description: guest created
          schema:
            $ref: '#/definitions/main.CustomerResponse'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Create or get a guest (customer without session)
      tags:
      - customers
  /events:
    post:
      consumes:
      - application/json
      description: Creates a new event with validation for timeslot availability
      parameters:
      - description: Event details
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.CreateEventPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Event created successfully
          schema:
            $ref: '#/definitions/main.EventResponse'
        "400":
          description: Bad request - invalid input
          schema: {}
        "409":
          description: Conflict - timeslot already booked
          schema: {}
        "500":
          description: Internal server error
          schema: {}
      summary: Create a new event
      tags:
      - events
  /events/{eventId}:
    put:
      consumes:
      - application/json
      description: Updates an event with validation for timeslot availability
      parameters:
      - description: Event details
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.CreateEventPayload'
      - description: Event ID
        in: path
        name: eventId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Event updated successfully
          schema:
            $ref: '#/definitions/main.EventResponse'
        "400":
          description: Bad request - invalid input
          schema: {}
        "409":
          description: Invalid timeslot
          schema: {}
        "500":
          description: Internal server error
          schema: {}
      security:
      - CookieAuth: []
      summary: Update an event
      tags:
      - events
  /events/week:
    get:
      consumes:
      - application/json
      description: List all events of a brand in a specific week and validate the
        user input
      parameters:
      - description: Start date in YYYY-MM-DD format
        example: "2025-05-19"
        in: query
        name: startDate
        required: true
        type: string
      - description: End date in YYYY-MM-DD format
        example: "2025-05-20"
        in: query
        name: endDate
        required: true
        type: string
      - description: Brand ID
        example: 1
        in: query
        minimum: 1
        name: brandId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of brands
          schema:
            items:
              items:
                $ref: '#/definitions/main.EventResponse'
              type: array
            type: array
        "400":
          description: Bad request - invalid input
          schema: {}
        "409":
          description: Conflict - timeslot already booked
          schema: {}
        "500":
          description: Internal server error
          schema: {}
      security:
      - CookieAuth: []
      summary: List all events of a brand in a specific week
      tags:
      - events
  /health:
    get:
      description: Healthcheck endpoint
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
      summary: Healthcheck
      tags:
      - ops
  /service:
    post:
      consumes:
      - application/json
      description: Creates a new service for a brand and assigns it to specified providers
      parameters:
      - description: Service creation data
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.CreateServicePayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created service
          schema:
            $ref: '#/definitions/main.ServiceResponse'
        "400":
          description: Bad request - Invalid input
          schema: {}
        "401":
          description: Unauthorized - Invalid or missing token
          schema: {}
        "403":
          description: Forbidden - User does not belong to a brand
          schema: {}
        "404":
          description: Not found - One or more providers not found
          schema: {}
        "500":
          description: Internal server error
          schema: {}
      security:
      - CookieAuth: []
      summary: Create a new service
      tags:
      - service
  /service/{brandId}:
    get:
      consumes:
      - application/json
      description: Fetches all services of a brand
      parameters:
      - description: BrandId ID
        in: path
        name: brandId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/main.ServiceResponse'
            type: array
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Get services by brand
      tags:
      - service
  /service/id/{serviceId}:
    put:
      consumes:
      - application/json
      description: Update a service and the users that can provide it
      parameters:
      - description: Service update data
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.CreateServicePayload'
      produces:
      - application/json
      responses:
        "201":
          description: Updated service
          schema:
            $ref: '#/definitions/main.ServiceResponse'
        "400":
          description: Bad request - Invalid input
          schema: {}
        "401":
          description: Unauthorized - Invalid or missing token
          schema: {}
        "403":
          description: Forbidden - User does not belong to a brand
          schema: {}
        "404":
          description: Not found - One or more providers not found
          schema: {}
        "500":
          description: Internal server error
          schema: {}
      security:
      - CookieAuth: []
      summary: Update a service
      tags:
      - service
  /users:
    get:
      consumes:
      - application/json
      description: Fetches all users of a brand
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/main.UserResponse'
            type: array
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - CookieAuth: []
      summary: Get users by brand
      tags:
      - users
  /users/{id}:
    get:
      consumes:
      - application/json
      description: Fetches a user profile by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.UserResponse'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - CookieAuth: []
      summary: Fetches a user profile
      tags:
      - users
  /users/confirm/{token}:
    get:
      consumes:
      - application/json
      description: Activates a user account using the token sent in the activation
        email
      parameters:
      - description: Activation token
        in: path
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: User activated
          schema:
            type: string
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Activate a user account
      tags:
      - users
  /users/invite:
    post:
      consumes:
      - application/json
      description: Invites a new user by creating an account and sending an activation
        email
      parameters:
      - description: User invitation details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/main.InviteUserPayload'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully with invitation token
          schema:
            $ref: '#/definitions/main.UserWithToken'
        "400":
          description: Bad request - validation error or user already exists
          schema: {}
        "403":
          description: Forbidden - only owner role can invite users
          schema: {}
        "500":
          description: Internal server error
          schema: {}
      security:
      - CookieAuth: []
      summary: Invite a new user
      tags:
      - users
  /users/me:
    get:
      consumes:
      - application/json
      description: Fetches a user token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.UserResponse'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - CookieAuth: []
      summary: Get user by token
      tags:
      - users
securityDefinitions:
  CookieAuth:
    description: Session-based authentication using cookies
    in: cookie
    name: session_id
    type: apiKey
swagger: "2.0"
