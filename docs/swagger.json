{
    "swagger": "2.0",
    "info": {
        "description": "API for Event Managing System",
        "title": "Event Managing System",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        }
    },
    "basePath": "/v1",
    "paths": {
        "/admin/images": {
            "get": {
                "description": "Retrieves a brand's stored images.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Get the images of the brand from bucket",
                "responses": {
                    "200": {
                        "description": "Brand images",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid brand ID",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {}
                    }
                }
            }
        },
        "/auth/logout": {
            "post": {
                "description": "Clears the session cookie to log out the user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Logs out a user",
                "responses": {
                    "200": {
                        "description": "Logged out successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/auth/signin": {
            "post": {
                "description": "Sign in user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Sign in user",
                "parameters": [
                    {
                        "description": "User credentials",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.SignInUserPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User data",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/auth/signup": {
            "post": {
                "description": "Registers a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Registers a user",
                "parameters": [
                    {
                        "description": "User credentials",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.SignUpUserPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Register a new user",
                        "schema": {
                            "$ref": "#/definitions/main.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/brand": {
            "post": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "description": "Creates a new brand and associates it with the owner user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "brand"
                ],
                "summary": "Create a new brand",
                "parameters": [
                    {
                        "description": "Brand creation data",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.CreateBrandPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created brand",
                        "schema": {
                            "$ref": "#/definitions/store.BrandResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid input",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing token",
                        "schema": {}
                    },
                    "403": {
                        "description": "Forbidden - User is not an owner",
                        "schema": {}
                    },
                    "409": {
                        "description": "Conflict - Brand already exists",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {}
                    }
                }
            }
        },
        "/brand/public": {
            "get": {
                "description": "Retrieves a brand's details by its unique ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "brand"
                ],
                "summary": "Get brand by url",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Brand ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Brand details",
                        "schema": {
                            "$ref": "#/definitions/store.BrandResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid brand ID",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {}
                    }
                }
            }
        },
        "/brand/{id}": {
            "get": {
                "description": "Retrieves a brand's details by its unique ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "brand"
                ],
                "summary": "Get brand by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Brand ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Brand details",
                        "schema": {
                            "$ref": "#/definitions/store.BrandResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid brand ID",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {}
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "description": "Update the brand profile, working hours and social links",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "brand"
                ],
                "summary": "Update brand",
                "parameters": [
                    {
                        "description": "Brand data",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.UpdateBrandPayload"
                        }
                    },
                    {
                        "type": "integer",
                        "description": "Brand ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Updated brand",
                        "schema": {
                            "$ref": "#/definitions/store.BrandResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid input",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing token",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {}
                    }
                }
            }
        },
        "/brand/{id}/social-links": {
            "put": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "description": "Update the social media links for a brand",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "brand"
                ],
                "summary": "Update brand social links",
                "parameters": [
                    {
                        "description": "Social links data",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.UpdateBrandSocialLinksPayload"
                        }
                    },
                    {
                        "type": "integer",
                        "description": "Brand ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated brand with social links",
                        "schema": {
                            "$ref": "#/definitions/store.BrandResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid input",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing token",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {}
                    }
                }
            }
        },
        "/brand/{id}/working-hours": {
            "put": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "description": "Update the working hours for a brand",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "brand"
                ],
                "summary": "Update brand working hours",
                "parameters": [
                    {
                        "description": "Working hours data",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.UpdateBrandWorkingHoursPayload"
                        }
                    },
                    {
                        "type": "integer",
                        "description": "Brand ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated brand with working hours",
                        "schema": {
                            "$ref": "#/definitions/store.BrandResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid input",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing token",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {}
                    }
                }
            }
        },
        "/customers": {
            "get": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "description": "Fetches all customers of a brand",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "customers"
                ],
                "summary": "Get customers by brand",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/main.CustomerResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/customers/auth/logout": {
            "post": {
                "description": "Clears the refresh token cookie to log out the customer",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "customers"
                ],
                "summary": "Logs out a customer",
                "responses": {
                    "200": {
                        "description": "Logged out successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/customers/auth/signin": {
            "post": {
                "description": "Login a customer",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "customers"
                ],
                "summary": "Login a customer",
                "parameters": [
                    {
                        "description": "customer credentials",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.SignInCustomerPayload"
                        }
                    },
                    {
                        "type": "string",
                        "default": "1",
                        "description": "Brand ID header for development. In production this header is ignored",
                        "name": "X-Brand-ID",
                        "in": "header"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "customer logged in",
                        "schema": {
                            "$ref": "#/definitions/main.CustomerResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/customers/auth/signup": {
            "post": {
                "description": "Registers a customer",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "customers"
                ],
                "summary": "Registers a customer",
                "parameters": [
                    {
                        "description": "customer credentials",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.SignUpCustomerPayload"
                        }
                    },
                    {
                        "type": "string",
                        "default": "1",
                        "description": "Brand ID header for development. In production this header is ignored",
                        "name": "X-Brand-ID",
                        "in": "header"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "customer registered",
                        "schema": {
                            "$ref": "#/definitions/main.CustomerResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/customers/guest": {
            "post": {
                "description": "Create or get a guest",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "customers"
                ],
                "summary": "Create or get a guest (customer without session)",
                "parameters": [
                    {
                        "description": "guest credentials",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.CreateGuestCustomerPayload"
                        }
                    },
                    {
                        "type": "string",
                        "default": "1",
                        "description": "Brand ID header for development. In production this header is ignored",
                        "name": "X-Brand-ID",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "guest already exists",
                        "schema": {
                            "$ref": "#/definitions/main.CustomerResponse"
                        }
                    },
                    "201": {
                        "description": "guest created",
                        "schema": {
                            "$ref": "#/definitions/main.CustomerResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/events": {
            "post": {
                "description": "Creates a new event with validation for timeslot availability",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Create a new event",
                "parameters": [
                    {
                        "description": "Event details",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.CreateEventPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Event created successfully",
                        "schema": {
                            "$ref": "#/definitions/main.EventResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid input",
                        "schema": {}
                    },
                    "409": {
                        "description": "Conflict - timeslot already booked",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {}
                    }
                }
            }
        },
        "/events/week": {
            "get": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "description": "List all events of a brand in a specific week and validate the user input",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "List all events of a brand in a specific week",
                "parameters": [
                    {
                        "type": "string",
                        "example": "2025-05-19",
                        "description": "Start date in YYYY-MM-DD format",
                        "name": "startDate",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "2025-05-20",
                        "description": "End date in YYYY-MM-DD format",
                        "name": "endDate",
                        "in": "query",
                        "required": true
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "example": 1,
                        "description": "Brand ID",
                        "name": "brandId",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of brands",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/main.EventResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid input",
                        "schema": {}
                    },
                    "409": {
                        "description": "Conflict - timeslot already booked",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {}
                    }
                }
            }
        },
        "/events/{eventId}": {
            "put": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "description": "Updates an event with validation for timeslot availability",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Update an event",
                "parameters": [
                    {
                        "description": "Event details",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.CreateEventPayload"
                        }
                    },
                    {
                        "type": "integer",
                        "description": "Event ID",
                        "name": "eventId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Event updated successfully",
                        "schema": {
                            "$ref": "#/definitions/main.EventResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid input",
                        "schema": {}
                    },
                    "409": {
                        "description": "Invalid timeslot",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {}
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "Healthcheck endpoint",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ops"
                ],
                "summary": "Healthcheck",
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/service": {
            "post": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "description": "Creates a new service for a brand and assigns it to specified providers",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "service"
                ],
                "summary": "Create a new service",
                "parameters": [
                    {
                        "description": "Service creation data",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.CreateServicePayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created service",
                        "schema": {
                            "$ref": "#/definitions/main.ServiceResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid input",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing token",
                        "schema": {}
                    },
                    "403": {
                        "description": "Forbidden - User does not belong to a brand",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not found - One or more providers not found",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {}
                    }
                }
            }
        },
        "/service/id/{serviceId}": {
            "put": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "description": "Update a service and the users that can provide it",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "service"
                ],
                "summary": "Update a service",
                "parameters": [
                    {
                        "description": "Service update data",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.CreateServicePayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Updated service",
                        "schema": {
                            "$ref": "#/definitions/main.ServiceResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid input",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing token",
                        "schema": {}
                    },
                    "403": {
                        "description": "Forbidden - User does not belong to a brand",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not found - One or more providers not found",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {}
                    }
                }
            }
        },
        "/service/{brandId}": {
            "get": {
                "description": "Fetches all services of a brand",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "service"
                ],
                "summary": "Get services by brand",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "BrandId ID",
                        "name": "brandId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/main.ServiceResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/users": {
            "get": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "description": "Fetches all users of a brand",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get users by brand",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/main.UserResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/users/confirm/{token}": {
            "get": {
                "description": "Activates a user account using the token sent in the activation email",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Activate a user account",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Activation token",
                        "name": "token",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "User activated",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/users/invite": {
            "post": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "description": "Invites a new user by creating an account and sending an activation email",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Invite a new user",
                "parameters": [
                    {
                        "description": "User invitation details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.InviteUserPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User created successfully with invitation token",
                        "schema": {
                            "$ref": "#/definitions/main.UserWithToken"
                        }
                    },
                    "400": {
                        "description": "Bad request - validation error or user already exists",
                        "schema": {}
                    },
                    "403": {
                        "description": "Forbidden - only owner role can invite users",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {}
                    }
                }
            }
        },
        "/users/me": {
            "get": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "description": "Fetches a user token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get user by token",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "description": "Fetches a user profile by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Fetches a user profile",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        }
    },
    "definitions": {
        "main.CreateBrandPayload": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 3
                }
            }
        },
        "main.CreateEventPayload": {
            "type": "object",
            "required": [
                "brandId",
                "customerId",
                "endTime",
                "serviceId",
                "startTime",
                "userId"
            ],
            "properties": {
                "brandId": {
                    "type": "integer",
                    "minimum": 0
                },
                "comment": {
                    "type": "string"
                },
                "customerId": {
                    "type": "integer",
                    "minimum": 0
                },
                "endTime": {
                    "type": "string"
                },
                "serviceId": {
                    "type": "string"
                },
                "startTime": {
                    "type": "string"
                },
                "userId": {
                    "type": "integer",
                    "minimum": 0
                }
            }
        },
        "main.CreateGuestCustomerPayload": {
            "type": "object",
            "required": [
                "name",
                "phoneNumber"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 2
                },
                "phoneNumber": {
                    "type": "string"
                }
            }
        },
        "main.CreateServicePayload": {
            "type": "object",
            "required": [
                "duration",
                "title"
            ],
            "properties": {
                "bufferTime": {
                    "type": "integer"
                },
                "cost": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "duration": {
                    "type": "integer"
                },
                "imageURL": {
                    "type": "string"
                },
                "isVisible": {
                    "type": "boolean"
                },
                "title": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 3
                },
                "userIDs": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "main.CustomerResponse": {
            "type": "object",
            "properties": {
                "brandId": {
                    "type": "integer"
                },
                "createdAt": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "phoneNumber": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "main.EventResponse": {
            "type": "object",
            "properties": {
                "brandId": {
                    "type": "integer"
                },
                "bufferTime": {
                    "type": "integer"
                },
                "comment": {
                    "type": "string"
                },
                "cost": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "customerId": {
                    "type": "integer"
                },
                "customerName": {
                    "type": "string"
                },
                "endTime": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "serviceId": {
                    "type": "string"
                },
                "serviceName": {
                    "type": "string"
                },
                "startTime": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "userId": {
                    "type": "integer"
                },
                "userName": {
                    "type": "string"
                }
            }
        },
        "main.InviteUserPayload": {
            "type": "object",
            "required": [
                "email",
                "username"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "username": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 2
                }
            }
        },
        "main.ServiceResponse": {
            "type": "object",
            "properties": {
                "brandId": {
                    "type": "integer"
                },
                "bufferTime": {
                    "type": "integer"
                },
                "cost": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "duration": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "imageUrl": {
                    "type": "string"
                },
                "isVisible": {
                    "type": "boolean"
                },
                "providers": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "title": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "main.SignInCustomerPayload": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "maxLength": 72,
                    "minLength": 3
                }
            }
        },
        "main.SignInUserPayload": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "maxLength": 255
                },
                "password": {
                    "type": "string",
                    "maxLength": 72,
                    "minLength": 3
                }
            }
        },
        "main.SignUpCustomerPayload": {
            "type": "object",
            "required": [
                "email",
                "name",
                "password",
                "phoneNumber"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 2
                },
                "password": {
                    "type": "string",
                    "maxLength": 72,
                    "minLength": 3
                },
                "phoneNumber": {
                    "type": "string"
                }
            }
        },
        "main.SignUpUserPayload": {
            "type": "object",
            "required": [
                "email",
                "password",
                "username"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "maxLength": 72,
                    "minLength": 3
                },
                "username": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 2
                }
            }
        },
        "main.UpdateBrandPayload": {
            "type": "object",
            "required": [
                "name",
                "pageUrl"
            ],
            "properties": {
                "address": {
                    "type": "string"
                },
                "bannerUrl": {
                    "type": "string"
                },
                "city": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "logoUrl": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 3
                },
                "pageUrl": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                },
                "zipCode": {
                    "type": "string"
                }
            }
        },
        "main.UpdateBrandSocialLink": {
            "type": "object",
            "required": [
                "platform",
                "url"
            ],
            "properties": {
                "platform": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "main.UpdateBrandSocialLinksPayload": {
            "type": "object",
            "properties": {
                "socialLinks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/main.UpdateBrandSocialLink"
                    }
                }
            }
        },
        "main.UpdateBrandWorkingHours": {
            "type": "object",
            "required": [
                "dayOfWeek"
            ],
            "properties": {
                "closeTime": {
                    "type": "string"
                },
                "dayOfWeek": {
                    "type": "integer",
                    "maximum": 6,
                    "minimum": 0
                },
                "isClosed": {
                    "type": "boolean"
                },
                "openTime": {
                    "type": "string"
                }
            }
        },
        "main.UpdateBrandWorkingHoursPayload": {
            "type": "object",
            "properties": {
                "workingHours": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/main.UpdateBrandWorkingHours"
                    }
                }
            }
        },
        "main.UserResponse": {
            "type": "object",
            "properties": {
                "avatar": {
                    "type": "string"
                },
                "brandId": {
                    "type": "integer"
                },
                "createdAt": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "verified": {
                    "type": "boolean"
                }
            }
        },
        "main.UserWithToken": {
            "type": "object",
            "properties": {
                "avatar": {
                    "type": "string"
                },
                "brandId": {
                    "type": "integer"
                },
                "createdAt": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "verified": {
                    "type": "boolean"
                }
            }
        },
        "store.BrandResponse": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "bannerUrl": {
                    "type": "string"
                },
                "city": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "logoUrl": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "pageUrl": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "socialLinks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/store.SocialLink"
                    }
                },
                "state": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "workingHours": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/store.WorkingHour"
                    }
                },
                "zipCode": {
                    "type": "string"
                }
            }
        },
        "store.SocialLink": {
            "type": "object",
            "properties": {
                "brandId": {
                    "type": "integer"
                },
                "createdAt": {
                    "type": "string"
                },
                "displayName": {
                    "type": "string"
                },
                "platform": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "store.WorkingHour": {
            "type": "object",
            "properties": {
                "brandId": {
                    "type": "integer"
                },
                "closeTime": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "dayOfWeek": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "isClosed": {
                    "type": "boolean"
                },
                "openTime": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "CookieAuth": {
            "description": "Session-based authentication using cookies",
            "type": "apiKey",
            "name": "session_id",
            "in": "cookie"
        }
    }
}