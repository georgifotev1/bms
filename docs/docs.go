// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/logout": {
            "post": {
                "description": "Clears the refresh token cookie to log out the user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Logs out a user",
                "responses": {
                    "200": {
                        "description": "Logged out successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/auth/refresh": {
            "get": {
                "description": "Uses a refresh token to generate a new access token",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Refreshes an access token",
                "responses": {
                    "200": {
                        "description": "New access token",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "Registers a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Registers a user",
                "parameters": [
                    {
                        "description": "User credentials",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.RegisterUserPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User registered",
                        "schema": {
                            "$ref": "#/definitions/main.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/auth/token": {
            "post": {
                "description": "Creates a token for a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Creates a token",
                "parameters": [
                    {
                        "description": "User credentials",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.CreateUserTokenPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Token",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/bookings": {
            "post": {
                "description": "Creates a new booking with validation for timeslot availability",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "bookings"
                ],
                "summary": "Create a new booking",
                "parameters": [
                    {
                        "description": "Booking details",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.CreateBookingPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Booking created successfully",
                        "schema": {
                            "$ref": "#/definitions/main.BookingResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid input",
                        "schema": {}
                    },
                    "409": {
                        "description": "Conflict - timeslot already booked",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {}
                    }
                }
            }
        },
        "/bookings/week": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "List all bookings of a brand in a specific week and validate the user input",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "bookings"
                ],
                "summary": "List all bookings of a brand in a specific week",
                "parameters": [
                    {
                        "type": "string",
                        "example": "2025-05-19",
                        "description": "Start date in YYYY-MM-DD format",
                        "name": "startDate",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "2025-05-20",
                        "description": "End date in YYYY-MM-DD format",
                        "name": "endDate",
                        "in": "query",
                        "required": true
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "example": 1,
                        "description": "Brand ID",
                        "name": "brandId",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of brands",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/main.BookingResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid input",
                        "schema": {}
                    },
                    "409": {
                        "description": "Conflict - timeslot already booked",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {}
                    }
                }
            }
        },
        "/brand": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Creates a new brand and associates it with the owner user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "brand"
                ],
                "summary": "Create a new brand",
                "parameters": [
                    {
                        "description": "Brand creation data",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.CreateBrandPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created brand",
                        "schema": {
                            "$ref": "#/definitions/store.BrandResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid input",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing token",
                        "schema": {}
                    },
                    "403": {
                        "description": "Forbidden - User is not an owner",
                        "schema": {}
                    },
                    "409": {
                        "description": "Conflict - Brand already exists",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {}
                    }
                }
            }
        },
        "/customers/auth/login": {
            "post": {
                "description": "Login a customer",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "customers"
                ],
                "summary": "Login a customer",
                "parameters": [
                    {
                        "description": "customer credentials",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.LoginCustomerPayload"
                        }
                    },
                    {
                        "type": "string",
                        "default": "1",
                        "description": "Brand ID header for development. In production this header is ignored",
                        "name": "X-Brand-ID",
                        "in": "header"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "customer logged in",
                        "schema": {
                            "$ref": "#/definitions/main.CustomerResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/customers/auth/logout": {
            "post": {
                "description": "Clears the refresh token cookie to log out the customer",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "customers"
                ],
                "summary": "Logs out a customer",
                "responses": {
                    "200": {
                        "description": "Logged out successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/customers/auth/refresh": {
            "get": {
                "description": "Uses a refresh token to generate a new access token",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "customers"
                ],
                "summary": "Refreshes the access token of customer",
                "responses": {
                    "200": {
                        "description": "New access token",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/customers/auth/register": {
            "post": {
                "description": "Registers a customer",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "customers"
                ],
                "summary": "Registers a customer",
                "parameters": [
                    {
                        "description": "customer credentials",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.RegisterCustomerPayload"
                        }
                    },
                    {
                        "type": "string",
                        "default": "1",
                        "description": "Brand ID header for development. In production this header is ignored",
                        "name": "X-Brand-ID",
                        "in": "header"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "customer registered",
                        "schema": {
                            "$ref": "#/definitions/main.CustomerResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/customers/guest": {
            "post": {
                "description": "Create or get a guest",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "customers"
                ],
                "summary": "Create or get a guest (customer without session)",
                "parameters": [
                    {
                        "description": "guest credentials",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.CreateGuestCustomerPayload"
                        }
                    },
                    {
                        "type": "string",
                        "default": "1",
                        "description": "Brand ID header for development. In production this header is ignored",
                        "name": "X-Brand-ID",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "guest already exists",
                        "schema": {
                            "$ref": "#/definitions/main.CustomerResponse"
                        }
                    },
                    "201": {
                        "description": "guest created",
                        "schema": {
                            "$ref": "#/definitions/main.CustomerResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "Healthcheck endpoint",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ops"
                ],
                "summary": "Healthcheck",
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/service": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Creates a new service for a brand and assigns it to specified providers",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "service"
                ],
                "summary": "Create a new service",
                "parameters": [
                    {
                        "description": "Service creation data",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.CreateServicePayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created service",
                        "schema": {
                            "$ref": "#/definitions/main.ServiceResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid input",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing token",
                        "schema": {}
                    },
                    "403": {
                        "description": "Forbidden - User does not belong to a brand",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not found - One or more providers not found",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {}
                    }
                }
            }
        },
        "/users/confirm/{token}": {
            "get": {
                "description": "Activates a user account using the token sent in the activation email",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Activate a user account",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Activation token",
                        "name": "token",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "User activated",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/users/invite": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Invites a new user by creating an account and sending an activation email",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Invite a new user",
                "parameters": [
                    {
                        "description": "User invitation details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.InviteUserPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User created successfully with invitation token",
                        "schema": {
                            "$ref": "#/definitions/main.UserWithToken"
                        }
                    },
                    "400": {
                        "description": "Bad request - validation error or user already exists",
                        "schema": {}
                    },
                    "403": {
                        "description": "Forbidden - only owner role can invite users",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {}
                    }
                }
            }
        },
        "/users/me": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Fetches a user token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get user by token",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Fetches a user profile by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Fetches a user profile",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        }
    },
    "definitions": {
        "main.BookingResponse": {
            "type": "object",
            "properties": {
                "brandId": {
                    "type": "integer"
                },
                "comment": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "customerId": {
                    "type": "integer"
                },
                "endTime": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "serviceId": {
                    "type": "string"
                },
                "startTime": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "userId": {
                    "type": "integer"
                }
            }
        },
        "main.CreateBookingPayload": {
            "type": "object",
            "required": [
                "brandId",
                "customerId",
                "endTime",
                "serviceId",
                "startTime",
                "userId"
            ],
            "properties": {
                "brandId": {
                    "type": "integer",
                    "minimum": 0
                },
                "comment": {
                    "type": "string"
                },
                "customerId": {
                    "type": "integer",
                    "minimum": 0
                },
                "endTime": {
                    "type": "string"
                },
                "serviceId": {
                    "type": "string"
                },
                "startTime": {
                    "type": "string"
                },
                "userId": {
                    "type": "integer",
                    "minimum": 0
                }
            }
        },
        "main.CreateBrandPayload": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 3
                }
            }
        },
        "main.CreateGuestCustomerPayload": {
            "type": "object",
            "required": [
                "name",
                "phoneNumber"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 2
                },
                "phoneNumber": {
                    "type": "string"
                }
            }
        },
        "main.CreateServicePayload": {
            "type": "object",
            "required": [
                "duration",
                "title"
            ],
            "properties": {
                "buffer_time": {
                    "type": "integer"
                },
                "cost": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "duration": {
                    "type": "integer"
                },
                "image_url": {
                    "type": "string"
                },
                "is_visible": {
                    "type": "boolean"
                },
                "title": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 3
                },
                "user_ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "main.CreateUserTokenPayload": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "maxLength": 255
                },
                "password": {
                    "type": "string",
                    "maxLength": 72,
                    "minLength": 3
                }
            }
        },
        "main.CustomerResponse": {
            "type": "object",
            "properties": {
                "brandId": {
                    "type": "integer"
                },
                "createdAt": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "phoneNumber": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "main.InviteUserPayload": {
            "type": "object",
            "required": [
                "email",
                "username"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "username": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 2
                }
            }
        },
        "main.LoginCustomerPayload": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "maxLength": 72,
                    "minLength": 3
                }
            }
        },
        "main.RegisterCustomerPayload": {
            "type": "object",
            "required": [
                "email",
                "name",
                "password",
                "phoneNumber"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 2
                },
                "password": {
                    "type": "string",
                    "maxLength": 72,
                    "minLength": 3
                },
                "phoneNumber": {
                    "type": "string"
                }
            }
        },
        "main.RegisterUserPayload": {
            "type": "object",
            "required": [
                "email",
                "password",
                "username"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "maxLength": 72,
                    "minLength": 3
                },
                "username": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 2
                }
            }
        },
        "main.ServiceResponse": {
            "type": "object",
            "properties": {
                "brandId": {
                    "type": "integer"
                },
                "bufferTime": {
                    "type": "integer"
                },
                "cost": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "duration": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "imageUrl": {
                    "type": "string"
                },
                "isVisible": {
                    "type": "boolean"
                },
                "providers": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "title": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "main.UserResponse": {
            "type": "object",
            "properties": {
                "avatar": {
                    "type": "string"
                },
                "brandId": {
                    "type": "integer"
                },
                "createdAt": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "verified": {
                    "type": "boolean"
                }
            }
        },
        "main.UserWithToken": {
            "type": "object",
            "properties": {
                "avatar": {
                    "type": "string"
                },
                "brandId": {
                    "type": "integer"
                },
                "createdAt": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "verified": {
                    "type": "boolean"
                }
            }
        },
        "store.BrandResponse": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "bannerUrl": {
                    "type": "string"
                },
                "city": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "logoUrl": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "pageUrl": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "socialLinks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/store.SocialLink"
                    }
                },
                "state": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "workingHours": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/store.WorkingHour"
                    }
                },
                "zipCode": {
                    "type": "string"
                }
            }
        },
        "store.SocialLink": {
            "type": "object",
            "properties": {
                "brandId": {
                    "type": "integer"
                },
                "createdAt": {
                    "type": "string"
                },
                "displayName": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "platform": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "store.WorkingHour": {
            "type": "object",
            "properties": {
                "brandId": {
                    "type": "integer"
                },
                "closeTime": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "dayOfWeek": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "isClosed": {
                    "type": "boolean"
                },
                "openTime": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "/v1",
	Schemes:          []string{},
	Title:            "Booking System",
	Description:      "API for Booking System",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
