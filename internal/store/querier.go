// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package store

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

type Querier interface {
	AddBrandSocialLink(ctx context.Context, arg AddBrandSocialLinkParams) (*BrandSocialLink, error)
	AssignServiceToUser(ctx context.Context, arg AssignServiceToUserParams) error
	AssociateUserWithBrand(ctx context.Context, arg AssociateUserWithBrandParams) error
	CheckSpecificTimeslotAvailability(ctx context.Context, arg CheckSpecificTimeslotAvailabilityParams) (interface{}, error)
	CreateBrand(ctx context.Context, arg CreateBrandParams) (*Brand, error)
	CreateCustomer(ctx context.Context, arg CreateCustomerParams) (*Customer, error)
	CreateCustomerSession(ctx context.Context, arg CreateCustomerSessionParams) (*CustomerSession, error)
	CreateEvent(ctx context.Context, arg CreateEventParams) (*Event, error)
	CreateGuestCustomer(ctx context.Context, arg CreateGuestCustomerParams) (*Customer, error)
	CreateService(ctx context.Context, arg CreateServiceParams) (*Service, error)
	CreateUser(ctx context.Context, arg CreateUserParams) (*User, error)
	CreateUserInvitation(ctx context.Context, arg CreateUserInvitationParams) error
	CreateUserSession(ctx context.Context, arg CreateUserSessionParams) (*UserSession, error)
	DeleteBrandSocialLink(ctx context.Context, arg DeleteBrandSocialLinkParams) error
	DeleteCustomer(ctx context.Context, id int64) error
	DeleteEvent(ctx context.Context, id int64) error
	DeleteService(ctx context.Context, id uuid.UUID) error
	DeleteUser(ctx context.Context, id int64) error
	DeleteUserInvitation(ctx context.Context, userID int64) error
	// Parameters: brand_id, date, service_id
	// Get all events for the given date and brand
	// Get all users (staff) for the brand
	// Generate time slots for the day (e.g., every 15 min from 9am to 5pm)
	// Apply service duration to get slot end times
	// Check availability for each staff member and time slot
	// Final available time slots with at least one available staff
	GetAvailableTimeslots(ctx context.Context, arg GetAvailableTimeslotsParams) ([]*GetAvailableTimeslotsRow, error)
	GetBrand(ctx context.Context, id int32) (*Brand, error)
	GetBrandById(ctx context.Context, id int32) (*Brand, error)
	GetBrandByUrl(ctx context.Context, pageUrl string) (int32, error)
	GetBrandSocialLinks(ctx context.Context, brandID int32) ([]*BrandSocialLink, error)
	GetBrandUsers(ctx context.Context, brandID sql.NullInt32) ([]*User, error)
	GetBrandWorkingHours(ctx context.Context, brandID int32) ([]*BrandWorkingHour, error)
	GetCustomerByEmail(ctx context.Context, email sql.NullString) (*Customer, error)
	GetCustomerById(ctx context.Context, id int64) (*Customer, error)
	GetCustomerByNameAndPhone(ctx context.Context, arg GetCustomerByNameAndPhoneParams) (*Customer, error)
	GetCustomerSessionById(ctx context.Context, id uuid.UUID) (*CustomerSession, error)
	GetCustomersByBrand(ctx context.Context, brandID int32) ([]*Customer, error)
	GetEventByID(ctx context.Context, id int64) (*Event, error)
	GetEventsByDay(ctx context.Context, arg GetEventsByDayParams) ([]*Event, error)
	GetEventsByWeek(ctx context.Context, arg GetEventsByWeekParams) ([]*Event, error)
	GetService(ctx context.Context, id uuid.UUID) (*Service, error)
	GetSessionByCustomerId(ctx context.Context, customerID int64) (*CustomerSession, error)
	GetSessionByUserId(ctx context.Context, userID int64) (*UserSession, error)
	GetUserByEmail(ctx context.Context, email string) (*User, error)
	GetUserById(ctx context.Context, id int64) (*User, error)
	GetUserEventsByDay(ctx context.Context, arg GetUserEventsByDayParams) ([]*Event, error)
	GetUserEventsByWeek(ctx context.Context, arg GetUserEventsByWeekParams) ([]*Event, error)
	GetUserFromInvitation(ctx context.Context, token string) (int64, error)
	GetUserSessionById(ctx context.Context, id uuid.UUID) (*UserSession, error)
	GetUsersByBrand(ctx context.Context, brandID sql.NullInt32) ([]*User, error)
	ListEventsByBrand(ctx context.Context, arg ListEventsByBrandParams) ([]*Event, error)
	ListEventsByCustomer(ctx context.Context, arg ListEventsByCustomerParams) ([]*Event, error)
	ListEventsByUser(ctx context.Context, arg ListEventsByUserParams) ([]*Event, error)
	ListServicesWithProviders(ctx context.Context, brandID int32) ([]*ListServicesWithProvidersRow, error)
	ListUserServices(ctx context.Context, userID int64) ([]*Service, error)
	ListVisibleServices(ctx context.Context, brandID int32) ([]*Service, error)
	RemoveUsersFromService(ctx context.Context, serviceID uuid.UUID) error
	UpdateBrand(ctx context.Context, arg UpdateBrandParams) (*Brand, error)
	UpdateBrandPartial(ctx context.Context, arg UpdateBrandPartialParams) (*Brand, error)
	UpdateBrandSocialLink(ctx context.Context, arg UpdateBrandSocialLinkParams) (*BrandSocialLink, error)
	UpdateCustomerSession(ctx context.Context, arg UpdateCustomerSessionParams) (*CustomerSession, error)
	UpdateEvent(ctx context.Context, arg UpdateEventParams) (*Event, error)
	UpdateService(ctx context.Context, arg UpdateServiceParams) (*Service, error)
	UpdateUserSession(ctx context.Context, arg UpdateUserSessionParams) (*UserSession, error)
	UpsertBrandSocialLink(ctx context.Context, arg UpsertBrandSocialLinkParams) (*BrandSocialLink, error)
	UpsertBrandWorkingHours(ctx context.Context, arg UpsertBrandWorkingHoursParams) (*BrandWorkingHour, error)
	UpsertCustomerSession(ctx context.Context, arg UpsertCustomerSessionParams) (*CustomerSession, error)
	UpsertUserSession(ctx context.Context, arg UpsertUserSessionParams) (*UserSession, error)
	ValidateUsersCount(ctx context.Context, arg ValidateUsersCountParams) (int64, error)
	VerifyUser(ctx context.Context, id int64) error
}

var _ Querier = (*Queries)(nil)
