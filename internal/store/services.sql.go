// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: services.sql

package store

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const assignServiceToUser = `-- name: AssignServiceToUser :exec
INSERT INTO user_services (
    user_id,
    service_id
) VALUES (
    $1, $2
)
`

type AssignServiceToUserParams struct {
	UserID    int64     `json:"userId"`
	ServiceID uuid.UUID `json:"serviceId"`
}

func (q *Queries) AssignServiceToUser(ctx context.Context, arg AssignServiceToUserParams) error {
	_, err := q.db.ExecContext(ctx, assignServiceToUser, arg.UserID, arg.ServiceID)
	return err
}

const createService = `-- name: CreateService :one
INSERT INTO services (
    title,
    description,
    duration,
    buffer_time,
    cost,
    is_visible,
    image_url,
    brand_id
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING id, title, description, duration, buffer_time, cost, is_visible, image_url, brand_id, created_at, updated_at
`

type CreateServiceParams struct {
	Title       string         `json:"title"`
	Description sql.NullString `json:"description"`
	Duration    int32          `json:"duration"`
	BufferTime  sql.NullInt32  `json:"bufferTime"`
	Cost        sql.NullString `json:"cost"`
	IsVisible   bool           `json:"isVisible"`
	ImageUrl    sql.NullString `json:"imageUrl"`
	BrandID     int32          `json:"brandId"`
}

func (q *Queries) CreateService(ctx context.Context, arg CreateServiceParams) (*Service, error) {
	row := q.db.QueryRowContext(ctx, createService,
		arg.Title,
		arg.Description,
		arg.Duration,
		arg.BufferTime,
		arg.Cost,
		arg.IsVisible,
		arg.ImageUrl,
		arg.BrandID,
	)
	var i Service
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Duration,
		&i.BufferTime,
		&i.Cost,
		&i.IsVisible,
		&i.ImageUrl,
		&i.BrandID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const deleteService = `-- name: DeleteService :exec
DELETE FROM services
WHERE id = $1
`

func (q *Queries) DeleteService(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteService, id)
	return err
}

const getService = `-- name: GetService :one
SELECT id, title, description, duration, buffer_time, cost, is_visible, image_url, brand_id, created_at, updated_at FROM services
WHERE id = $1
`

func (q *Queries) GetService(ctx context.Context, id uuid.UUID) (*Service, error) {
	row := q.db.QueryRowContext(ctx, getService, id)
	var i Service
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Duration,
		&i.BufferTime,
		&i.Cost,
		&i.IsVisible,
		&i.ImageUrl,
		&i.BrandID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const listServicesWithProviders = `-- name: ListServicesWithProviders :many
SELECT
    services.id,
    services.title,
    services.description,
    services.duration,
    services.buffer_time,
    services.cost,
    services.is_visible,
    services.image_url,
    services.brand_id,
    services.created_at,
    services.updated_at,
    users.id as provider_id
FROM services
LEFT JOIN user_services us ON services.id = us.service_id
LEFT JOIN users ON us.user_id = users.id
WHERE services.brand_id = $1
ORDER BY services.title, users.name
`

type ListServicesWithProvidersRow struct {
	ID          uuid.UUID      `json:"id"`
	Title       string         `json:"title"`
	Description sql.NullString `json:"description"`
	Duration    int32          `json:"duration"`
	BufferTime  sql.NullInt32  `json:"bufferTime"`
	Cost        sql.NullString `json:"cost"`
	IsVisible   bool           `json:"isVisible"`
	ImageUrl    sql.NullString `json:"imageUrl"`
	BrandID     int32          `json:"brandId"`
	CreatedAt   time.Time      `json:"createdAt"`
	UpdatedAt   time.Time      `json:"updatedAt"`
	ProviderID  sql.NullInt64  `json:"providerId"`
}

func (q *Queries) ListServicesWithProviders(ctx context.Context, brandID int32) ([]*ListServicesWithProvidersRow, error) {
	rows, err := q.db.QueryContext(ctx, listServicesWithProviders, brandID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*ListServicesWithProvidersRow
	for rows.Next() {
		var i ListServicesWithProvidersRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Duration,
			&i.BufferTime,
			&i.Cost,
			&i.IsVisible,
			&i.ImageUrl,
			&i.BrandID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ProviderID,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUserServices = `-- name: ListUserServices :many
SELECT s.id, s.title, s.description, s.duration, s.buffer_time, s.cost, s.is_visible, s.image_url, s.brand_id, s.created_at, s.updated_at
FROM services s
JOIN user_services us ON s.id = us.service_id
WHERE us.user_id = $1
`

func (q *Queries) ListUserServices(ctx context.Context, userID int64) ([]*Service, error) {
	rows, err := q.db.QueryContext(ctx, listUserServices, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Service
	for rows.Next() {
		var i Service
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Duration,
			&i.BufferTime,
			&i.Cost,
			&i.IsVisible,
			&i.ImageUrl,
			&i.BrandID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listVisibleServices = `-- name: ListVisibleServices :many
SELECT id, title, description, duration, buffer_time, cost, is_visible, image_url, brand_id, created_at, updated_at FROM services
WHERE brand_id = $1 AND is_visible = true
ORDER BY created_at DESC
`

func (q *Queries) ListVisibleServices(ctx context.Context, brandID int32) ([]*Service, error) {
	rows, err := q.db.QueryContext(ctx, listVisibleServices, brandID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Service
	for rows.Next() {
		var i Service
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Duration,
			&i.BufferTime,
			&i.Cost,
			&i.IsVisible,
			&i.ImageUrl,
			&i.BrandID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeServiceFromUser = `-- name: RemoveServiceFromUser :exec
DELETE FROM user_services
WHERE user_id = $1 AND service_id = $2
`

type RemoveServiceFromUserParams struct {
	UserID    int64     `json:"userId"`
	ServiceID uuid.UUID `json:"serviceId"`
}

func (q *Queries) RemoveServiceFromUser(ctx context.Context, arg RemoveServiceFromUserParams) error {
	_, err := q.db.ExecContext(ctx, removeServiceFromUser, arg.UserID, arg.ServiceID)
	return err
}

const updateService = `-- name: UpdateService :one
UPDATE services
SET
    title = $2,
    description = $3,
    duration = $4,
    buffer_time = $5,
    cost = $6,
    is_visible = $7,
    image_url = $8,
    brand_id = $9,
    updated_at = NOW()
WHERE id = $1
RETURNING id, title, description, duration, buffer_time, cost, is_visible, image_url, brand_id, created_at, updated_at
`

type UpdateServiceParams struct {
	ID          uuid.UUID      `json:"id"`
	Title       string         `json:"title"`
	Description sql.NullString `json:"description"`
	Duration    int32          `json:"duration"`
	BufferTime  sql.NullInt32  `json:"bufferTime"`
	Cost        sql.NullString `json:"cost"`
	IsVisible   bool           `json:"isVisible"`
	ImageUrl    sql.NullString `json:"imageUrl"`
	BrandID     int32          `json:"brandId"`
}

func (q *Queries) UpdateService(ctx context.Context, arg UpdateServiceParams) (*Service, error) {
	row := q.db.QueryRowContext(ctx, updateService,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.Duration,
		arg.BufferTime,
		arg.Cost,
		arg.IsVisible,
		arg.ImageUrl,
		arg.BrandID,
	)
	var i Service
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Duration,
		&i.BufferTime,
		&i.Cost,
		&i.IsVisible,
		&i.ImageUrl,
		&i.BrandID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
