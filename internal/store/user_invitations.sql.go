// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user_invitations.sql

package store

import (
	"context"
	"time"
)

const createUserInvitation = `-- name: CreateUserInvitation :exec
INSERT INTO user_invitations (token, user_id, expiry)
VALUES ($1,$2,$3)
`

type CreateUserInvitationParams struct {
	Token  string    `json:"token"`
	UserID int64     `json:"userId"`
	Expiry time.Time `json:"expiry"`
}

func (q *Queries) CreateUserInvitation(ctx context.Context, arg CreateUserInvitationParams) error {
	_, err := q.db.ExecContext(ctx, createUserInvitation, arg.Token, arg.UserID, arg.Expiry)
	return err
}

const deleteUserInvitation = `-- name: DeleteUserInvitation :exec
DELETE FROM user_invitations
WHERE user_id = $1
`

func (q *Queries) DeleteUserInvitation(ctx context.Context, userID int64) error {
	_, err := q.db.ExecContext(ctx, deleteUserInvitation, userID)
	return err
}

const getUserFromInvitation = `-- name: GetUserFromInvitation :one
SELECT u.id FROM users u JOIN user_invitations ui
ON u.id = ui.user_id
WHERE ui.token = $1 AND ui.expiry > NOW()
`

func (q *Queries) GetUserFromInvitation(ctx context.Context, token string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getUserFromInvitation, token)
	var id int64
	err := row.Scan(&id)
	return id, err
}
