// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package store

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockDBTX creates a new instance of MockDBTX. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDBTX(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDBTX {
	mock := &MockDBTX{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDBTX is an autogenerated mock type for the DBTX type
type MockDBTX struct {
	mock.Mock
}

type MockDBTX_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDBTX) EXPECT() *MockDBTX_Expecter {
	return &MockDBTX_Expecter{mock: &_m.Mock}
}

// ExecContext provides a mock function for the type MockDBTX
func (_mock *MockDBTX) ExecContext(context1 context.Context, s string, ifaceVals ...interface{}) (sql.Result, error) {
	var tmpRet mock.Arguments
	if len(ifaceVals) > 0 {
		tmpRet = _mock.Called(context1, s, ifaceVals)
	} else {
		tmpRet = _mock.Called(context1, s)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ExecContext")
	}

	var r0 sql.Result
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...interface{}) (sql.Result, error)); ok {
		return returnFunc(context1, s, ifaceVals...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...interface{}) sql.Result); ok {
		r0 = returnFunc(context1, s, ifaceVals...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sql.Result)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...interface{}) error); ok {
		r1 = returnFunc(context1, s, ifaceVals...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDBTX_ExecContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecContext'
type MockDBTX_ExecContext_Call struct {
	*mock.Call
}

// ExecContext is a helper method to define mock.On call
//   - context1
//   - s
//   - ifaceVals
func (_e *MockDBTX_Expecter) ExecContext(context1 interface{}, s interface{}, ifaceVals ...interface{}) *MockDBTX_ExecContext_Call {
	return &MockDBTX_ExecContext_Call{Call: _e.mock.On("ExecContext",
		append([]interface{}{context1, s}, ifaceVals...)...)}
}

func (_c *MockDBTX_ExecContext_Call) Run(run func(context1 context.Context, s string, ifaceVals ...interface{})) *MockDBTX_ExecContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]interface{})
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockDBTX_ExecContext_Call) Return(result sql.Result, err error) *MockDBTX_ExecContext_Call {
	_c.Call.Return(result, err)
	return _c
}

func (_c *MockDBTX_ExecContext_Call) RunAndReturn(run func(context1 context.Context, s string, ifaceVals ...interface{}) (sql.Result, error)) *MockDBTX_ExecContext_Call {
	_c.Call.Return(run)
	return _c
}

// PrepareContext provides a mock function for the type MockDBTX
func (_mock *MockDBTX) PrepareContext(context1 context.Context, s string) (*sql.Stmt, error) {
	ret := _mock.Called(context1, s)

	if len(ret) == 0 {
		panic("no return value specified for PrepareContext")
	}

	var r0 *sql.Stmt
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*sql.Stmt, error)); ok {
		return returnFunc(context1, s)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *sql.Stmt); ok {
		r0 = returnFunc(context1, s)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Stmt)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(context1, s)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDBTX_PrepareContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PrepareContext'
type MockDBTX_PrepareContext_Call struct {
	*mock.Call
}

// PrepareContext is a helper method to define mock.On call
//   - context1
//   - s
func (_e *MockDBTX_Expecter) PrepareContext(context1 interface{}, s interface{}) *MockDBTX_PrepareContext_Call {
	return &MockDBTX_PrepareContext_Call{Call: _e.mock.On("PrepareContext", context1, s)}
}

func (_c *MockDBTX_PrepareContext_Call) Run(run func(context1 context.Context, s string)) *MockDBTX_PrepareContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockDBTX_PrepareContext_Call) Return(stmt *sql.Stmt, err error) *MockDBTX_PrepareContext_Call {
	_c.Call.Return(stmt, err)
	return _c
}

func (_c *MockDBTX_PrepareContext_Call) RunAndReturn(run func(context1 context.Context, s string) (*sql.Stmt, error)) *MockDBTX_PrepareContext_Call {
	_c.Call.Return(run)
	return _c
}

// QueryContext provides a mock function for the type MockDBTX
func (_mock *MockDBTX) QueryContext(context1 context.Context, s string, ifaceVals ...interface{}) (*sql.Rows, error) {
	var tmpRet mock.Arguments
	if len(ifaceVals) > 0 {
		tmpRet = _mock.Called(context1, s, ifaceVals)
	} else {
		tmpRet = _mock.Called(context1, s)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for QueryContext")
	}

	var r0 *sql.Rows
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...interface{}) (*sql.Rows, error)); ok {
		return returnFunc(context1, s, ifaceVals...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *sql.Rows); ok {
		r0 = returnFunc(context1, s, ifaceVals...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Rows)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...interface{}) error); ok {
		r1 = returnFunc(context1, s, ifaceVals...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDBTX_QueryContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryContext'
type MockDBTX_QueryContext_Call struct {
	*mock.Call
}

// QueryContext is a helper method to define mock.On call
//   - context1
//   - s
//   - ifaceVals
func (_e *MockDBTX_Expecter) QueryContext(context1 interface{}, s interface{}, ifaceVals ...interface{}) *MockDBTX_QueryContext_Call {
	return &MockDBTX_QueryContext_Call{Call: _e.mock.On("QueryContext",
		append([]interface{}{context1, s}, ifaceVals...)...)}
}

func (_c *MockDBTX_QueryContext_Call) Run(run func(context1 context.Context, s string, ifaceVals ...interface{})) *MockDBTX_QueryContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]interface{})
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockDBTX_QueryContext_Call) Return(rows *sql.Rows, err error) *MockDBTX_QueryContext_Call {
	_c.Call.Return(rows, err)
	return _c
}

func (_c *MockDBTX_QueryContext_Call) RunAndReturn(run func(context1 context.Context, s string, ifaceVals ...interface{}) (*sql.Rows, error)) *MockDBTX_QueryContext_Call {
	_c.Call.Return(run)
	return _c
}

// QueryRowContext provides a mock function for the type MockDBTX
func (_mock *MockDBTX) QueryRowContext(context1 context.Context, s string, ifaceVals ...interface{}) *sql.Row {
	var tmpRet mock.Arguments
	if len(ifaceVals) > 0 {
		tmpRet = _mock.Called(context1, s, ifaceVals)
	} else {
		tmpRet = _mock.Called(context1, s)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for QueryRowContext")
	}

	var r0 *sql.Row
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *sql.Row); ok {
		r0 = returnFunc(context1, s, ifaceVals...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Row)
		}
	}
	return r0
}

// MockDBTX_QueryRowContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryRowContext'
type MockDBTX_QueryRowContext_Call struct {
	*mock.Call
}

// QueryRowContext is a helper method to define mock.On call
//   - context1
//   - s
//   - ifaceVals
func (_e *MockDBTX_Expecter) QueryRowContext(context1 interface{}, s interface{}, ifaceVals ...interface{}) *MockDBTX_QueryRowContext_Call {
	return &MockDBTX_QueryRowContext_Call{Call: _e.mock.On("QueryRowContext",
		append([]interface{}{context1, s}, ifaceVals...)...)}
}

func (_c *MockDBTX_QueryRowContext_Call) Run(run func(context1 context.Context, s string, ifaceVals ...interface{})) *MockDBTX_QueryRowContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[2].([]interface{})
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockDBTX_QueryRowContext_Call) Return(row *sql.Row) *MockDBTX_QueryRowContext_Call {
	_c.Call.Return(row)
	return _c
}

func (_c *MockDBTX_QueryRowContext_Call) RunAndReturn(run func(context1 context.Context, s string, ifaceVals ...interface{}) *sql.Row) *MockDBTX_QueryRowContext_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockQuerier creates a new instance of MockQuerier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQuerier(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockQuerier {
	mock := &MockQuerier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockQuerier is an autogenerated mock type for the Querier type
type MockQuerier struct {
	mock.Mock
}

type MockQuerier_Expecter struct {
	mock *mock.Mock
}

func (_m *MockQuerier) EXPECT() *MockQuerier_Expecter {
	return &MockQuerier_Expecter{mock: &_m.Mock}
}

// AddBrandSocialLink provides a mock function for the type MockQuerier
func (_mock *MockQuerier) AddBrandSocialLink(ctx context.Context, arg AddBrandSocialLinkParams) (*BrandSocialLink, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for AddBrandSocialLink")
	}

	var r0 *BrandSocialLink
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, AddBrandSocialLinkParams) (*BrandSocialLink, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, AddBrandSocialLinkParams) *BrandSocialLink); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BrandSocialLink)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, AddBrandSocialLinkParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_AddBrandSocialLink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddBrandSocialLink'
type MockQuerier_AddBrandSocialLink_Call struct {
	*mock.Call
}

// AddBrandSocialLink is a helper method to define mock.On call
//   - ctx
//   - arg
func (_e *MockQuerier_Expecter) AddBrandSocialLink(ctx interface{}, arg interface{}) *MockQuerier_AddBrandSocialLink_Call {
	return &MockQuerier_AddBrandSocialLink_Call{Call: _e.mock.On("AddBrandSocialLink", ctx, arg)}
}

func (_c *MockQuerier_AddBrandSocialLink_Call) Run(run func(ctx context.Context, arg AddBrandSocialLinkParams)) *MockQuerier_AddBrandSocialLink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(AddBrandSocialLinkParams))
	})
	return _c
}

func (_c *MockQuerier_AddBrandSocialLink_Call) Return(brandSocialLink *BrandSocialLink, err error) *MockQuerier_AddBrandSocialLink_Call {
	_c.Call.Return(brandSocialLink, err)
	return _c
}

func (_c *MockQuerier_AddBrandSocialLink_Call) RunAndReturn(run func(ctx context.Context, arg AddBrandSocialLinkParams) (*BrandSocialLink, error)) *MockQuerier_AddBrandSocialLink_Call {
	_c.Call.Return(run)
	return _c
}

// AssignServiceToUser provides a mock function for the type MockQuerier
func (_mock *MockQuerier) AssignServiceToUser(ctx context.Context, arg AssignServiceToUserParams) error {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for AssignServiceToUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, AssignServiceToUserParams) error); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockQuerier_AssignServiceToUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AssignServiceToUser'
type MockQuerier_AssignServiceToUser_Call struct {
	*mock.Call
}

// AssignServiceToUser is a helper method to define mock.On call
//   - ctx
//   - arg
func (_e *MockQuerier_Expecter) AssignServiceToUser(ctx interface{}, arg interface{}) *MockQuerier_AssignServiceToUser_Call {
	return &MockQuerier_AssignServiceToUser_Call{Call: _e.mock.On("AssignServiceToUser", ctx, arg)}
}

func (_c *MockQuerier_AssignServiceToUser_Call) Run(run func(ctx context.Context, arg AssignServiceToUserParams)) *MockQuerier_AssignServiceToUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(AssignServiceToUserParams))
	})
	return _c
}

func (_c *MockQuerier_AssignServiceToUser_Call) Return(err error) *MockQuerier_AssignServiceToUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockQuerier_AssignServiceToUser_Call) RunAndReturn(run func(ctx context.Context, arg AssignServiceToUserParams) error) *MockQuerier_AssignServiceToUser_Call {
	_c.Call.Return(run)
	return _c
}

// AssociateUserWithBrand provides a mock function for the type MockQuerier
func (_mock *MockQuerier) AssociateUserWithBrand(ctx context.Context, arg AssociateUserWithBrandParams) error {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for AssociateUserWithBrand")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, AssociateUserWithBrandParams) error); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockQuerier_AssociateUserWithBrand_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AssociateUserWithBrand'
type MockQuerier_AssociateUserWithBrand_Call struct {
	*mock.Call
}

// AssociateUserWithBrand is a helper method to define mock.On call
//   - ctx
//   - arg
func (_e *MockQuerier_Expecter) AssociateUserWithBrand(ctx interface{}, arg interface{}) *MockQuerier_AssociateUserWithBrand_Call {
	return &MockQuerier_AssociateUserWithBrand_Call{Call: _e.mock.On("AssociateUserWithBrand", ctx, arg)}
}

func (_c *MockQuerier_AssociateUserWithBrand_Call) Run(run func(ctx context.Context, arg AssociateUserWithBrandParams)) *MockQuerier_AssociateUserWithBrand_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(AssociateUserWithBrandParams))
	})
	return _c
}

func (_c *MockQuerier_AssociateUserWithBrand_Call) Return(err error) *MockQuerier_AssociateUserWithBrand_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockQuerier_AssociateUserWithBrand_Call) RunAndReturn(run func(ctx context.Context, arg AssociateUserWithBrandParams) error) *MockQuerier_AssociateUserWithBrand_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBrand provides a mock function for the type MockQuerier
func (_mock *MockQuerier) CreateBrand(ctx context.Context, arg CreateBrandParams) (*Brand, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateBrand")
	}

	var r0 *Brand
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, CreateBrandParams) (*Brand, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, CreateBrandParams) *Brand); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Brand)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, CreateBrandParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_CreateBrand_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBrand'
type MockQuerier_CreateBrand_Call struct {
	*mock.Call
}

// CreateBrand is a helper method to define mock.On call
//   - ctx
//   - arg
func (_e *MockQuerier_Expecter) CreateBrand(ctx interface{}, arg interface{}) *MockQuerier_CreateBrand_Call {
	return &MockQuerier_CreateBrand_Call{Call: _e.mock.On("CreateBrand", ctx, arg)}
}

func (_c *MockQuerier_CreateBrand_Call) Run(run func(ctx context.Context, arg CreateBrandParams)) *MockQuerier_CreateBrand_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(CreateBrandParams))
	})
	return _c
}

func (_c *MockQuerier_CreateBrand_Call) Return(brand *Brand, err error) *MockQuerier_CreateBrand_Call {
	_c.Call.Return(brand, err)
	return _c
}

func (_c *MockQuerier_CreateBrand_Call) RunAndReturn(run func(ctx context.Context, arg CreateBrandParams) (*Brand, error)) *MockQuerier_CreateBrand_Call {
	_c.Call.Return(run)
	return _c
}

// CreateCustomer provides a mock function for the type MockQuerier
func (_mock *MockQuerier) CreateCustomer(ctx context.Context, arg CreateCustomerParams) (*Customer, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateCustomer")
	}

	var r0 *Customer
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, CreateCustomerParams) (*Customer, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, CreateCustomerParams) *Customer); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Customer)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, CreateCustomerParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_CreateCustomer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCustomer'
type MockQuerier_CreateCustomer_Call struct {
	*mock.Call
}

// CreateCustomer is a helper method to define mock.On call
//   - ctx
//   - arg
func (_e *MockQuerier_Expecter) CreateCustomer(ctx interface{}, arg interface{}) *MockQuerier_CreateCustomer_Call {
	return &MockQuerier_CreateCustomer_Call{Call: _e.mock.On("CreateCustomer", ctx, arg)}
}

func (_c *MockQuerier_CreateCustomer_Call) Run(run func(ctx context.Context, arg CreateCustomerParams)) *MockQuerier_CreateCustomer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(CreateCustomerParams))
	})
	return _c
}

func (_c *MockQuerier_CreateCustomer_Call) Return(customer *Customer, err error) *MockQuerier_CreateCustomer_Call {
	_c.Call.Return(customer, err)
	return _c
}

func (_c *MockQuerier_CreateCustomer_Call) RunAndReturn(run func(ctx context.Context, arg CreateCustomerParams) (*Customer, error)) *MockQuerier_CreateCustomer_Call {
	_c.Call.Return(run)
	return _c
}

// CreateService provides a mock function for the type MockQuerier
func (_mock *MockQuerier) CreateService(ctx context.Context, arg CreateServiceParams) (*Service, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateService")
	}

	var r0 *Service
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, CreateServiceParams) (*Service, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, CreateServiceParams) *Service); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Service)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, CreateServiceParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_CreateService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateService'
type MockQuerier_CreateService_Call struct {
	*mock.Call
}

// CreateService is a helper method to define mock.On call
//   - ctx
//   - arg
func (_e *MockQuerier_Expecter) CreateService(ctx interface{}, arg interface{}) *MockQuerier_CreateService_Call {
	return &MockQuerier_CreateService_Call{Call: _e.mock.On("CreateService", ctx, arg)}
}

func (_c *MockQuerier_CreateService_Call) Run(run func(ctx context.Context, arg CreateServiceParams)) *MockQuerier_CreateService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(CreateServiceParams))
	})
	return _c
}

func (_c *MockQuerier_CreateService_Call) Return(service *Service, err error) *MockQuerier_CreateService_Call {
	_c.Call.Return(service, err)
	return _c
}

func (_c *MockQuerier_CreateService_Call) RunAndReturn(run func(ctx context.Context, arg CreateServiceParams) (*Service, error)) *MockQuerier_CreateService_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUser provides a mock function for the type MockQuerier
func (_mock *MockQuerier) CreateUser(ctx context.Context, arg CreateUserParams) (*User, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, CreateUserParams) (*User, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, CreateUserParams) *User); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, CreateUserParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockQuerier_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx
//   - arg
func (_e *MockQuerier_Expecter) CreateUser(ctx interface{}, arg interface{}) *MockQuerier_CreateUser_Call {
	return &MockQuerier_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, arg)}
}

func (_c *MockQuerier_CreateUser_Call) Run(run func(ctx context.Context, arg CreateUserParams)) *MockQuerier_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(CreateUserParams))
	})
	return _c
}

func (_c *MockQuerier_CreateUser_Call) Return(user *User, err error) *MockQuerier_CreateUser_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockQuerier_CreateUser_Call) RunAndReturn(run func(ctx context.Context, arg CreateUserParams) (*User, error)) *MockQuerier_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUserInvitation provides a mock function for the type MockQuerier
func (_mock *MockQuerier) CreateUserInvitation(ctx context.Context, arg CreateUserInvitationParams) error {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateUserInvitation")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, CreateUserInvitationParams) error); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockQuerier_CreateUserInvitation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUserInvitation'
type MockQuerier_CreateUserInvitation_Call struct {
	*mock.Call
}

// CreateUserInvitation is a helper method to define mock.On call
//   - ctx
//   - arg
func (_e *MockQuerier_Expecter) CreateUserInvitation(ctx interface{}, arg interface{}) *MockQuerier_CreateUserInvitation_Call {
	return &MockQuerier_CreateUserInvitation_Call{Call: _e.mock.On("CreateUserInvitation", ctx, arg)}
}

func (_c *MockQuerier_CreateUserInvitation_Call) Run(run func(ctx context.Context, arg CreateUserInvitationParams)) *MockQuerier_CreateUserInvitation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(CreateUserInvitationParams))
	})
	return _c
}

func (_c *MockQuerier_CreateUserInvitation_Call) Return(err error) *MockQuerier_CreateUserInvitation_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockQuerier_CreateUserInvitation_Call) RunAndReturn(run func(ctx context.Context, arg CreateUserInvitationParams) error) *MockQuerier_CreateUserInvitation_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteBrandSocialLink provides a mock function for the type MockQuerier
func (_mock *MockQuerier) DeleteBrandSocialLink(ctx context.Context, arg DeleteBrandSocialLinkParams) error {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBrandSocialLink")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, DeleteBrandSocialLinkParams) error); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockQuerier_DeleteBrandSocialLink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteBrandSocialLink'
type MockQuerier_DeleteBrandSocialLink_Call struct {
	*mock.Call
}

// DeleteBrandSocialLink is a helper method to define mock.On call
//   - ctx
//   - arg
func (_e *MockQuerier_Expecter) DeleteBrandSocialLink(ctx interface{}, arg interface{}) *MockQuerier_DeleteBrandSocialLink_Call {
	return &MockQuerier_DeleteBrandSocialLink_Call{Call: _e.mock.On("DeleteBrandSocialLink", ctx, arg)}
}

func (_c *MockQuerier_DeleteBrandSocialLink_Call) Run(run func(ctx context.Context, arg DeleteBrandSocialLinkParams)) *MockQuerier_DeleteBrandSocialLink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(DeleteBrandSocialLinkParams))
	})
	return _c
}

func (_c *MockQuerier_DeleteBrandSocialLink_Call) Return(err error) *MockQuerier_DeleteBrandSocialLink_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockQuerier_DeleteBrandSocialLink_Call) RunAndReturn(run func(ctx context.Context, arg DeleteBrandSocialLinkParams) error) *MockQuerier_DeleteBrandSocialLink_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCustomer provides a mock function for the type MockQuerier
func (_mock *MockQuerier) DeleteCustomer(ctx context.Context, id int64) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCustomer")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockQuerier_DeleteCustomer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCustomer'
type MockQuerier_DeleteCustomer_Call struct {
	*mock.Call
}

// DeleteCustomer is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockQuerier_Expecter) DeleteCustomer(ctx interface{}, id interface{}) *MockQuerier_DeleteCustomer_Call {
	return &MockQuerier_DeleteCustomer_Call{Call: _e.mock.On("DeleteCustomer", ctx, id)}
}

func (_c *MockQuerier_DeleteCustomer_Call) Run(run func(ctx context.Context, id int64)) *MockQuerier_DeleteCustomer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockQuerier_DeleteCustomer_Call) Return(err error) *MockQuerier_DeleteCustomer_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockQuerier_DeleteCustomer_Call) RunAndReturn(run func(ctx context.Context, id int64) error) *MockQuerier_DeleteCustomer_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteService provides a mock function for the type MockQuerier
func (_mock *MockQuerier) DeleteService(ctx context.Context, id uuid.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteService")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockQuerier_DeleteService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteService'
type MockQuerier_DeleteService_Call struct {
	*mock.Call
}

// DeleteService is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockQuerier_Expecter) DeleteService(ctx interface{}, id interface{}) *MockQuerier_DeleteService_Call {
	return &MockQuerier_DeleteService_Call{Call: _e.mock.On("DeleteService", ctx, id)}
}

func (_c *MockQuerier_DeleteService_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockQuerier_DeleteService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockQuerier_DeleteService_Call) Return(err error) *MockQuerier_DeleteService_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockQuerier_DeleteService_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) error) *MockQuerier_DeleteService_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function for the type MockQuerier
func (_mock *MockQuerier) DeleteUser(ctx context.Context, id int64) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockQuerier_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type MockQuerier_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockQuerier_Expecter) DeleteUser(ctx interface{}, id interface{}) *MockQuerier_DeleteUser_Call {
	return &MockQuerier_DeleteUser_Call{Call: _e.mock.On("DeleteUser", ctx, id)}
}

func (_c *MockQuerier_DeleteUser_Call) Run(run func(ctx context.Context, id int64)) *MockQuerier_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockQuerier_DeleteUser_Call) Return(err error) *MockQuerier_DeleteUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockQuerier_DeleteUser_Call) RunAndReturn(run func(ctx context.Context, id int64) error) *MockQuerier_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUserInvitation provides a mock function for the type MockQuerier
func (_mock *MockQuerier) DeleteUserInvitation(ctx context.Context, userID int64) error {
	ret := _mock.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUserInvitation")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = returnFunc(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockQuerier_DeleteUserInvitation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUserInvitation'
type MockQuerier_DeleteUserInvitation_Call struct {
	*mock.Call
}

// DeleteUserInvitation is a helper method to define mock.On call
//   - ctx
//   - userID
func (_e *MockQuerier_Expecter) DeleteUserInvitation(ctx interface{}, userID interface{}) *MockQuerier_DeleteUserInvitation_Call {
	return &MockQuerier_DeleteUserInvitation_Call{Call: _e.mock.On("DeleteUserInvitation", ctx, userID)}
}

func (_c *MockQuerier_DeleteUserInvitation_Call) Run(run func(ctx context.Context, userID int64)) *MockQuerier_DeleteUserInvitation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockQuerier_DeleteUserInvitation_Call) Return(err error) *MockQuerier_DeleteUserInvitation_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockQuerier_DeleteUserInvitation_Call) RunAndReturn(run func(ctx context.Context, userID int64) error) *MockQuerier_DeleteUserInvitation_Call {
	_c.Call.Return(run)
	return _c
}

// GetBrandById provides a mock function for the type MockQuerier
func (_mock *MockQuerier) GetBrandById(ctx context.Context, id int32) (*Brand, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetBrandById")
	}

	var r0 *Brand
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int32) (*Brand, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int32) *Brand); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Brand)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_GetBrandById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBrandById'
type MockQuerier_GetBrandById_Call struct {
	*mock.Call
}

// GetBrandById is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockQuerier_Expecter) GetBrandById(ctx interface{}, id interface{}) *MockQuerier_GetBrandById_Call {
	return &MockQuerier_GetBrandById_Call{Call: _e.mock.On("GetBrandById", ctx, id)}
}

func (_c *MockQuerier_GetBrandById_Call) Run(run func(ctx context.Context, id int32)) *MockQuerier_GetBrandById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *MockQuerier_GetBrandById_Call) Return(brand *Brand, err error) *MockQuerier_GetBrandById_Call {
	_c.Call.Return(brand, err)
	return _c
}

func (_c *MockQuerier_GetBrandById_Call) RunAndReturn(run func(ctx context.Context, id int32) (*Brand, error)) *MockQuerier_GetBrandById_Call {
	_c.Call.Return(run)
	return _c
}

// GetBrandByUrl provides a mock function for the type MockQuerier
func (_mock *MockQuerier) GetBrandByUrl(ctx context.Context, pageUrl string) (string, error) {
	ret := _mock.Called(ctx, pageUrl)

	if len(ret) == 0 {
		panic("no return value specified for GetBrandByUrl")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return returnFunc(ctx, pageUrl)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = returnFunc(ctx, pageUrl)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, pageUrl)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_GetBrandByUrl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBrandByUrl'
type MockQuerier_GetBrandByUrl_Call struct {
	*mock.Call
}

// GetBrandByUrl is a helper method to define mock.On call
//   - ctx
//   - pageUrl
func (_e *MockQuerier_Expecter) GetBrandByUrl(ctx interface{}, pageUrl interface{}) *MockQuerier_GetBrandByUrl_Call {
	return &MockQuerier_GetBrandByUrl_Call{Call: _e.mock.On("GetBrandByUrl", ctx, pageUrl)}
}

func (_c *MockQuerier_GetBrandByUrl_Call) Run(run func(ctx context.Context, pageUrl string)) *MockQuerier_GetBrandByUrl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockQuerier_GetBrandByUrl_Call) Return(s string, err error) *MockQuerier_GetBrandByUrl_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockQuerier_GetBrandByUrl_Call) RunAndReturn(run func(ctx context.Context, pageUrl string) (string, error)) *MockQuerier_GetBrandByUrl_Call {
	_c.Call.Return(run)
	return _c
}

// GetBrandProfile provides a mock function for the type MockQuerier
func (_mock *MockQuerier) GetBrandProfile(ctx context.Context, id int32) (*GetBrandProfileRow, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetBrandProfile")
	}

	var r0 *GetBrandProfileRow
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int32) (*GetBrandProfileRow, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int32) *GetBrandProfileRow); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetBrandProfileRow)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_GetBrandProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBrandProfile'
type MockQuerier_GetBrandProfile_Call struct {
	*mock.Call
}

// GetBrandProfile is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockQuerier_Expecter) GetBrandProfile(ctx interface{}, id interface{}) *MockQuerier_GetBrandProfile_Call {
	return &MockQuerier_GetBrandProfile_Call{Call: _e.mock.On("GetBrandProfile", ctx, id)}
}

func (_c *MockQuerier_GetBrandProfile_Call) Run(run func(ctx context.Context, id int32)) *MockQuerier_GetBrandProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *MockQuerier_GetBrandProfile_Call) Return(getBrandProfileRow *GetBrandProfileRow, err error) *MockQuerier_GetBrandProfile_Call {
	_c.Call.Return(getBrandProfileRow, err)
	return _c
}

func (_c *MockQuerier_GetBrandProfile_Call) RunAndReturn(run func(ctx context.Context, id int32) (*GetBrandProfileRow, error)) *MockQuerier_GetBrandProfile_Call {
	_c.Call.Return(run)
	return _c
}

// GetBrandUsers provides a mock function for the type MockQuerier
func (_mock *MockQuerier) GetBrandUsers(ctx context.Context, brandID sql.NullInt32) ([]*User, error) {
	ret := _mock.Called(ctx, brandID)

	if len(ret) == 0 {
		panic("no return value specified for GetBrandUsers")
	}

	var r0 []*User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, sql.NullInt32) ([]*User, error)); ok {
		return returnFunc(ctx, brandID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, sql.NullInt32) []*User); ok {
		r0 = returnFunc(ctx, brandID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, sql.NullInt32) error); ok {
		r1 = returnFunc(ctx, brandID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_GetBrandUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBrandUsers'
type MockQuerier_GetBrandUsers_Call struct {
	*mock.Call
}

// GetBrandUsers is a helper method to define mock.On call
//   - ctx
//   - brandID
func (_e *MockQuerier_Expecter) GetBrandUsers(ctx interface{}, brandID interface{}) *MockQuerier_GetBrandUsers_Call {
	return &MockQuerier_GetBrandUsers_Call{Call: _e.mock.On("GetBrandUsers", ctx, brandID)}
}

func (_c *MockQuerier_GetBrandUsers_Call) Run(run func(ctx context.Context, brandID sql.NullInt32)) *MockQuerier_GetBrandUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.NullInt32))
	})
	return _c
}

func (_c *MockQuerier_GetBrandUsers_Call) Return(users []*User, err error) *MockQuerier_GetBrandUsers_Call {
	_c.Call.Return(users, err)
	return _c
}

func (_c *MockQuerier_GetBrandUsers_Call) RunAndReturn(run func(ctx context.Context, brandID sql.NullInt32) ([]*User, error)) *MockQuerier_GetBrandUsers_Call {
	_c.Call.Return(run)
	return _c
}

// GetBrandWorkingHours provides a mock function for the type MockQuerier
func (_mock *MockQuerier) GetBrandWorkingHours(ctx context.Context, brandID int32) ([]*BrandWorkingHour, error) {
	ret := _mock.Called(ctx, brandID)

	if len(ret) == 0 {
		panic("no return value specified for GetBrandWorkingHours")
	}

	var r0 []*BrandWorkingHour
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int32) ([]*BrandWorkingHour, error)); ok {
		return returnFunc(ctx, brandID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int32) []*BrandWorkingHour); ok {
		r0 = returnFunc(ctx, brandID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*BrandWorkingHour)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = returnFunc(ctx, brandID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_GetBrandWorkingHours_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBrandWorkingHours'
type MockQuerier_GetBrandWorkingHours_Call struct {
	*mock.Call
}

// GetBrandWorkingHours is a helper method to define mock.On call
//   - ctx
//   - brandID
func (_e *MockQuerier_Expecter) GetBrandWorkingHours(ctx interface{}, brandID interface{}) *MockQuerier_GetBrandWorkingHours_Call {
	return &MockQuerier_GetBrandWorkingHours_Call{Call: _e.mock.On("GetBrandWorkingHours", ctx, brandID)}
}

func (_c *MockQuerier_GetBrandWorkingHours_Call) Run(run func(ctx context.Context, brandID int32)) *MockQuerier_GetBrandWorkingHours_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *MockQuerier_GetBrandWorkingHours_Call) Return(brandWorkingHours []*BrandWorkingHour, err error) *MockQuerier_GetBrandWorkingHours_Call {
	_c.Call.Return(brandWorkingHours, err)
	return _c
}

func (_c *MockQuerier_GetBrandWorkingHours_Call) RunAndReturn(run func(ctx context.Context, brandID int32) ([]*BrandWorkingHour, error)) *MockQuerier_GetBrandWorkingHours_Call {
	_c.Call.Return(run)
	return _c
}

// GetCustomerByEmail provides a mock function for the type MockQuerier
func (_mock *MockQuerier) GetCustomerByEmail(ctx context.Context, email string) (*Customer, error) {
	ret := _mock.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetCustomerByEmail")
	}

	var r0 *Customer
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*Customer, error)); ok {
		return returnFunc(ctx, email)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *Customer); ok {
		r0 = returnFunc(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Customer)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, email)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_GetCustomerByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCustomerByEmail'
type MockQuerier_GetCustomerByEmail_Call struct {
	*mock.Call
}

// GetCustomerByEmail is a helper method to define mock.On call
//   - ctx
//   - email
func (_e *MockQuerier_Expecter) GetCustomerByEmail(ctx interface{}, email interface{}) *MockQuerier_GetCustomerByEmail_Call {
	return &MockQuerier_GetCustomerByEmail_Call{Call: _e.mock.On("GetCustomerByEmail", ctx, email)}
}

func (_c *MockQuerier_GetCustomerByEmail_Call) Run(run func(ctx context.Context, email string)) *MockQuerier_GetCustomerByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockQuerier_GetCustomerByEmail_Call) Return(customer *Customer, err error) *MockQuerier_GetCustomerByEmail_Call {
	_c.Call.Return(customer, err)
	return _c
}

func (_c *MockQuerier_GetCustomerByEmail_Call) RunAndReturn(run func(ctx context.Context, email string) (*Customer, error)) *MockQuerier_GetCustomerByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetCustomerById provides a mock function for the type MockQuerier
func (_mock *MockQuerier) GetCustomerById(ctx context.Context, id int64) (*Customer, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetCustomerById")
	}

	var r0 *Customer
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) (*Customer, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) *Customer); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Customer)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_GetCustomerById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCustomerById'
type MockQuerier_GetCustomerById_Call struct {
	*mock.Call
}

// GetCustomerById is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockQuerier_Expecter) GetCustomerById(ctx interface{}, id interface{}) *MockQuerier_GetCustomerById_Call {
	return &MockQuerier_GetCustomerById_Call{Call: _e.mock.On("GetCustomerById", ctx, id)}
}

func (_c *MockQuerier_GetCustomerById_Call) Run(run func(ctx context.Context, id int64)) *MockQuerier_GetCustomerById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockQuerier_GetCustomerById_Call) Return(customer *Customer, err error) *MockQuerier_GetCustomerById_Call {
	_c.Call.Return(customer, err)
	return _c
}

func (_c *MockQuerier_GetCustomerById_Call) RunAndReturn(run func(ctx context.Context, id int64) (*Customer, error)) *MockQuerier_GetCustomerById_Call {
	_c.Call.Return(run)
	return _c
}

// GetService provides a mock function for the type MockQuerier
func (_mock *MockQuerier) GetService(ctx context.Context, id uuid.UUID) (*Service, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetService")
	}

	var r0 *Service
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*Service, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *Service); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Service)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_GetService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetService'
type MockQuerier_GetService_Call struct {
	*mock.Call
}

// GetService is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockQuerier_Expecter) GetService(ctx interface{}, id interface{}) *MockQuerier_GetService_Call {
	return &MockQuerier_GetService_Call{Call: _e.mock.On("GetService", ctx, id)}
}

func (_c *MockQuerier_GetService_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockQuerier_GetService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockQuerier_GetService_Call) Return(service *Service, err error) *MockQuerier_GetService_Call {
	_c.Call.Return(service, err)
	return _c
}

func (_c *MockQuerier_GetService_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*Service, error)) *MockQuerier_GetService_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByEmail provides a mock function for the type MockQuerier
func (_mock *MockQuerier) GetUserByEmail(ctx context.Context, email string) (*User, error) {
	ret := _mock.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmail")
	}

	var r0 *User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*User, error)); ok {
		return returnFunc(ctx, email)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *User); ok {
		r0 = returnFunc(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, email)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_GetUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByEmail'
type MockQuerier_GetUserByEmail_Call struct {
	*mock.Call
}

// GetUserByEmail is a helper method to define mock.On call
//   - ctx
//   - email
func (_e *MockQuerier_Expecter) GetUserByEmail(ctx interface{}, email interface{}) *MockQuerier_GetUserByEmail_Call {
	return &MockQuerier_GetUserByEmail_Call{Call: _e.mock.On("GetUserByEmail", ctx, email)}
}

func (_c *MockQuerier_GetUserByEmail_Call) Run(run func(ctx context.Context, email string)) *MockQuerier_GetUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockQuerier_GetUserByEmail_Call) Return(user *User, err error) *MockQuerier_GetUserByEmail_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockQuerier_GetUserByEmail_Call) RunAndReturn(run func(ctx context.Context, email string) (*User, error)) *MockQuerier_GetUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserById provides a mock function for the type MockQuerier
func (_mock *MockQuerier) GetUserById(ctx context.Context, id int64) (*User, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserById")
	}

	var r0 *User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) (*User, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) *User); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_GetUserById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserById'
type MockQuerier_GetUserById_Call struct {
	*mock.Call
}

// GetUserById is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockQuerier_Expecter) GetUserById(ctx interface{}, id interface{}) *MockQuerier_GetUserById_Call {
	return &MockQuerier_GetUserById_Call{Call: _e.mock.On("GetUserById", ctx, id)}
}

func (_c *MockQuerier_GetUserById_Call) Run(run func(ctx context.Context, id int64)) *MockQuerier_GetUserById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockQuerier_GetUserById_Call) Return(user *User, err error) *MockQuerier_GetUserById_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockQuerier_GetUserById_Call) RunAndReturn(run func(ctx context.Context, id int64) (*User, error)) *MockQuerier_GetUserById_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserFromInvitation provides a mock function for the type MockQuerier
func (_mock *MockQuerier) GetUserFromInvitation(ctx context.Context, token string) (int64, error) {
	ret := _mock.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for GetUserFromInvitation")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (int64, error)); ok {
		return returnFunc(ctx, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = returnFunc(ctx, token)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, token)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_GetUserFromInvitation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserFromInvitation'
type MockQuerier_GetUserFromInvitation_Call struct {
	*mock.Call
}

// GetUserFromInvitation is a helper method to define mock.On call
//   - ctx
//   - token
func (_e *MockQuerier_Expecter) GetUserFromInvitation(ctx interface{}, token interface{}) *MockQuerier_GetUserFromInvitation_Call {
	return &MockQuerier_GetUserFromInvitation_Call{Call: _e.mock.On("GetUserFromInvitation", ctx, token)}
}

func (_c *MockQuerier_GetUserFromInvitation_Call) Run(run func(ctx context.Context, token string)) *MockQuerier_GetUserFromInvitation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockQuerier_GetUserFromInvitation_Call) Return(n int64, err error) *MockQuerier_GetUserFromInvitation_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockQuerier_GetUserFromInvitation_Call) RunAndReturn(run func(ctx context.Context, token string) (int64, error)) *MockQuerier_GetUserFromInvitation_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsersByBrand provides a mock function for the type MockQuerier
func (_mock *MockQuerier) GetUsersByBrand(ctx context.Context, brandID sql.NullInt32) ([]*User, error) {
	ret := _mock.Called(ctx, brandID)

	if len(ret) == 0 {
		panic("no return value specified for GetUsersByBrand")
	}

	var r0 []*User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, sql.NullInt32) ([]*User, error)); ok {
		return returnFunc(ctx, brandID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, sql.NullInt32) []*User); ok {
		r0 = returnFunc(ctx, brandID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, sql.NullInt32) error); ok {
		r1 = returnFunc(ctx, brandID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_GetUsersByBrand_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsersByBrand'
type MockQuerier_GetUsersByBrand_Call struct {
	*mock.Call
}

// GetUsersByBrand is a helper method to define mock.On call
//   - ctx
//   - brandID
func (_e *MockQuerier_Expecter) GetUsersByBrand(ctx interface{}, brandID interface{}) *MockQuerier_GetUsersByBrand_Call {
	return &MockQuerier_GetUsersByBrand_Call{Call: _e.mock.On("GetUsersByBrand", ctx, brandID)}
}

func (_c *MockQuerier_GetUsersByBrand_Call) Run(run func(ctx context.Context, brandID sql.NullInt32)) *MockQuerier_GetUsersByBrand_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.NullInt32))
	})
	return _c
}

func (_c *MockQuerier_GetUsersByBrand_Call) Return(users []*User, err error) *MockQuerier_GetUsersByBrand_Call {
	_c.Call.Return(users, err)
	return _c
}

func (_c *MockQuerier_GetUsersByBrand_Call) RunAndReturn(run func(ctx context.Context, brandID sql.NullInt32) ([]*User, error)) *MockQuerier_GetUsersByBrand_Call {
	_c.Call.Return(run)
	return _c
}

// ListServices provides a mock function for the type MockQuerier
func (_mock *MockQuerier) ListServices(ctx context.Context, brandID int32) ([]*Service, error) {
	ret := _mock.Called(ctx, brandID)

	if len(ret) == 0 {
		panic("no return value specified for ListServices")
	}

	var r0 []*Service
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int32) ([]*Service, error)); ok {
		return returnFunc(ctx, brandID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int32) []*Service); ok {
		r0 = returnFunc(ctx, brandID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Service)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = returnFunc(ctx, brandID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_ListServices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListServices'
type MockQuerier_ListServices_Call struct {
	*mock.Call
}

// ListServices is a helper method to define mock.On call
//   - ctx
//   - brandID
func (_e *MockQuerier_Expecter) ListServices(ctx interface{}, brandID interface{}) *MockQuerier_ListServices_Call {
	return &MockQuerier_ListServices_Call{Call: _e.mock.On("ListServices", ctx, brandID)}
}

func (_c *MockQuerier_ListServices_Call) Run(run func(ctx context.Context, brandID int32)) *MockQuerier_ListServices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *MockQuerier_ListServices_Call) Return(services []*Service, err error) *MockQuerier_ListServices_Call {
	_c.Call.Return(services, err)
	return _c
}

func (_c *MockQuerier_ListServices_Call) RunAndReturn(run func(ctx context.Context, brandID int32) ([]*Service, error)) *MockQuerier_ListServices_Call {
	_c.Call.Return(run)
	return _c
}

// ListUserServices provides a mock function for the type MockQuerier
func (_mock *MockQuerier) ListUserServices(ctx context.Context, userID int64) ([]*Service, error) {
	ret := _mock.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for ListUserServices")
	}

	var r0 []*Service
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) ([]*Service, error)); ok {
		return returnFunc(ctx, userID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) []*Service); ok {
		r0 = returnFunc(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Service)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = returnFunc(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_ListUserServices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUserServices'
type MockQuerier_ListUserServices_Call struct {
	*mock.Call
}

// ListUserServices is a helper method to define mock.On call
//   - ctx
//   - userID
func (_e *MockQuerier_Expecter) ListUserServices(ctx interface{}, userID interface{}) *MockQuerier_ListUserServices_Call {
	return &MockQuerier_ListUserServices_Call{Call: _e.mock.On("ListUserServices", ctx, userID)}
}

func (_c *MockQuerier_ListUserServices_Call) Run(run func(ctx context.Context, userID int64)) *MockQuerier_ListUserServices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockQuerier_ListUserServices_Call) Return(services []*Service, err error) *MockQuerier_ListUserServices_Call {
	_c.Call.Return(services, err)
	return _c
}

func (_c *MockQuerier_ListUserServices_Call) RunAndReturn(run func(ctx context.Context, userID int64) ([]*Service, error)) *MockQuerier_ListUserServices_Call {
	_c.Call.Return(run)
	return _c
}

// ListVisibleServices provides a mock function for the type MockQuerier
func (_mock *MockQuerier) ListVisibleServices(ctx context.Context, brandID int32) ([]*Service, error) {
	ret := _mock.Called(ctx, brandID)

	if len(ret) == 0 {
		panic("no return value specified for ListVisibleServices")
	}

	var r0 []*Service
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int32) ([]*Service, error)); ok {
		return returnFunc(ctx, brandID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int32) []*Service); ok {
		r0 = returnFunc(ctx, brandID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Service)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = returnFunc(ctx, brandID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_ListVisibleServices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListVisibleServices'
type MockQuerier_ListVisibleServices_Call struct {
	*mock.Call
}

// ListVisibleServices is a helper method to define mock.On call
//   - ctx
//   - brandID
func (_e *MockQuerier_Expecter) ListVisibleServices(ctx interface{}, brandID interface{}) *MockQuerier_ListVisibleServices_Call {
	return &MockQuerier_ListVisibleServices_Call{Call: _e.mock.On("ListVisibleServices", ctx, brandID)}
}

func (_c *MockQuerier_ListVisibleServices_Call) Run(run func(ctx context.Context, brandID int32)) *MockQuerier_ListVisibleServices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *MockQuerier_ListVisibleServices_Call) Return(services []*Service, err error) *MockQuerier_ListVisibleServices_Call {
	_c.Call.Return(services, err)
	return _c
}

func (_c *MockQuerier_ListVisibleServices_Call) RunAndReturn(run func(ctx context.Context, brandID int32) ([]*Service, error)) *MockQuerier_ListVisibleServices_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveServiceFromUser provides a mock function for the type MockQuerier
func (_mock *MockQuerier) RemoveServiceFromUser(ctx context.Context, arg RemoveServiceFromUserParams) error {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for RemoveServiceFromUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, RemoveServiceFromUserParams) error); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockQuerier_RemoveServiceFromUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveServiceFromUser'
type MockQuerier_RemoveServiceFromUser_Call struct {
	*mock.Call
}

// RemoveServiceFromUser is a helper method to define mock.On call
//   - ctx
//   - arg
func (_e *MockQuerier_Expecter) RemoveServiceFromUser(ctx interface{}, arg interface{}) *MockQuerier_RemoveServiceFromUser_Call {
	return &MockQuerier_RemoveServiceFromUser_Call{Call: _e.mock.On("RemoveServiceFromUser", ctx, arg)}
}

func (_c *MockQuerier_RemoveServiceFromUser_Call) Run(run func(ctx context.Context, arg RemoveServiceFromUserParams)) *MockQuerier_RemoveServiceFromUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(RemoveServiceFromUserParams))
	})
	return _c
}

func (_c *MockQuerier_RemoveServiceFromUser_Call) Return(err error) *MockQuerier_RemoveServiceFromUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockQuerier_RemoveServiceFromUser_Call) RunAndReturn(run func(ctx context.Context, arg RemoveServiceFromUserParams) error) *MockQuerier_RemoveServiceFromUser_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateBrand provides a mock function for the type MockQuerier
func (_mock *MockQuerier) UpdateBrand(ctx context.Context, arg UpdateBrandParams) (*Brand, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBrand")
	}

	var r0 *Brand
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, UpdateBrandParams) (*Brand, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, UpdateBrandParams) *Brand); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Brand)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, UpdateBrandParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_UpdateBrand_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateBrand'
type MockQuerier_UpdateBrand_Call struct {
	*mock.Call
}

// UpdateBrand is a helper method to define mock.On call
//   - ctx
//   - arg
func (_e *MockQuerier_Expecter) UpdateBrand(ctx interface{}, arg interface{}) *MockQuerier_UpdateBrand_Call {
	return &MockQuerier_UpdateBrand_Call{Call: _e.mock.On("UpdateBrand", ctx, arg)}
}

func (_c *MockQuerier_UpdateBrand_Call) Run(run func(ctx context.Context, arg UpdateBrandParams)) *MockQuerier_UpdateBrand_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(UpdateBrandParams))
	})
	return _c
}

func (_c *MockQuerier_UpdateBrand_Call) Return(brand *Brand, err error) *MockQuerier_UpdateBrand_Call {
	_c.Call.Return(brand, err)
	return _c
}

func (_c *MockQuerier_UpdateBrand_Call) RunAndReturn(run func(ctx context.Context, arg UpdateBrandParams) (*Brand, error)) *MockQuerier_UpdateBrand_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateBrandPartial provides a mock function for the type MockQuerier
func (_mock *MockQuerier) UpdateBrandPartial(ctx context.Context, arg UpdateBrandPartialParams) (*Brand, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBrandPartial")
	}

	var r0 *Brand
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, UpdateBrandPartialParams) (*Brand, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, UpdateBrandPartialParams) *Brand); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Brand)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, UpdateBrandPartialParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_UpdateBrandPartial_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateBrandPartial'
type MockQuerier_UpdateBrandPartial_Call struct {
	*mock.Call
}

// UpdateBrandPartial is a helper method to define mock.On call
//   - ctx
//   - arg
func (_e *MockQuerier_Expecter) UpdateBrandPartial(ctx interface{}, arg interface{}) *MockQuerier_UpdateBrandPartial_Call {
	return &MockQuerier_UpdateBrandPartial_Call{Call: _e.mock.On("UpdateBrandPartial", ctx, arg)}
}

func (_c *MockQuerier_UpdateBrandPartial_Call) Run(run func(ctx context.Context, arg UpdateBrandPartialParams)) *MockQuerier_UpdateBrandPartial_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(UpdateBrandPartialParams))
	})
	return _c
}

func (_c *MockQuerier_UpdateBrandPartial_Call) Return(brand *Brand, err error) *MockQuerier_UpdateBrandPartial_Call {
	_c.Call.Return(brand, err)
	return _c
}

func (_c *MockQuerier_UpdateBrandPartial_Call) RunAndReturn(run func(ctx context.Context, arg UpdateBrandPartialParams) (*Brand, error)) *MockQuerier_UpdateBrandPartial_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateBrandWorkingHours provides a mock function for the type MockQuerier
func (_mock *MockQuerier) UpdateBrandWorkingHours(ctx context.Context, arg UpdateBrandWorkingHoursParams) (*BrandWorkingHour, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBrandWorkingHours")
	}

	var r0 *BrandWorkingHour
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, UpdateBrandWorkingHoursParams) (*BrandWorkingHour, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, UpdateBrandWorkingHoursParams) *BrandWorkingHour); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BrandWorkingHour)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, UpdateBrandWorkingHoursParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_UpdateBrandWorkingHours_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateBrandWorkingHours'
type MockQuerier_UpdateBrandWorkingHours_Call struct {
	*mock.Call
}

// UpdateBrandWorkingHours is a helper method to define mock.On call
//   - ctx
//   - arg
func (_e *MockQuerier_Expecter) UpdateBrandWorkingHours(ctx interface{}, arg interface{}) *MockQuerier_UpdateBrandWorkingHours_Call {
	return &MockQuerier_UpdateBrandWorkingHours_Call{Call: _e.mock.On("UpdateBrandWorkingHours", ctx, arg)}
}

func (_c *MockQuerier_UpdateBrandWorkingHours_Call) Run(run func(ctx context.Context, arg UpdateBrandWorkingHoursParams)) *MockQuerier_UpdateBrandWorkingHours_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(UpdateBrandWorkingHoursParams))
	})
	return _c
}

func (_c *MockQuerier_UpdateBrandWorkingHours_Call) Return(brandWorkingHour *BrandWorkingHour, err error) *MockQuerier_UpdateBrandWorkingHours_Call {
	_c.Call.Return(brandWorkingHour, err)
	return _c
}

func (_c *MockQuerier_UpdateBrandWorkingHours_Call) RunAndReturn(run func(ctx context.Context, arg UpdateBrandWorkingHoursParams) (*BrandWorkingHour, error)) *MockQuerier_UpdateBrandWorkingHours_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateService provides a mock function for the type MockQuerier
func (_mock *MockQuerier) UpdateService(ctx context.Context, arg UpdateServiceParams) (*Service, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateService")
	}

	var r0 *Service
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, UpdateServiceParams) (*Service, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, UpdateServiceParams) *Service); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Service)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, UpdateServiceParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_UpdateService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateService'
type MockQuerier_UpdateService_Call struct {
	*mock.Call
}

// UpdateService is a helper method to define mock.On call
//   - ctx
//   - arg
func (_e *MockQuerier_Expecter) UpdateService(ctx interface{}, arg interface{}) *MockQuerier_UpdateService_Call {
	return &MockQuerier_UpdateService_Call{Call: _e.mock.On("UpdateService", ctx, arg)}
}

func (_c *MockQuerier_UpdateService_Call) Run(run func(ctx context.Context, arg UpdateServiceParams)) *MockQuerier_UpdateService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(UpdateServiceParams))
	})
	return _c
}

func (_c *MockQuerier_UpdateService_Call) Return(service *Service, err error) *MockQuerier_UpdateService_Call {
	_c.Call.Return(service, err)
	return _c
}

func (_c *MockQuerier_UpdateService_Call) RunAndReturn(run func(ctx context.Context, arg UpdateServiceParams) (*Service, error)) *MockQuerier_UpdateService_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateUsersCount provides a mock function for the type MockQuerier
func (_mock *MockQuerier) ValidateUsersCount(ctx context.Context, arg ValidateUsersCountParams) (int64, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for ValidateUsersCount")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ValidateUsersCountParams) (int64, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ValidateUsersCountParams) int64); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ValidateUsersCountParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockQuerier_ValidateUsersCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateUsersCount'
type MockQuerier_ValidateUsersCount_Call struct {
	*mock.Call
}

// ValidateUsersCount is a helper method to define mock.On call
//   - ctx
//   - arg
func (_e *MockQuerier_Expecter) ValidateUsersCount(ctx interface{}, arg interface{}) *MockQuerier_ValidateUsersCount_Call {
	return &MockQuerier_ValidateUsersCount_Call{Call: _e.mock.On("ValidateUsersCount", ctx, arg)}
}

func (_c *MockQuerier_ValidateUsersCount_Call) Run(run func(ctx context.Context, arg ValidateUsersCountParams)) *MockQuerier_ValidateUsersCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ValidateUsersCountParams))
	})
	return _c
}

func (_c *MockQuerier_ValidateUsersCount_Call) Return(n int64, err error) *MockQuerier_ValidateUsersCount_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockQuerier_ValidateUsersCount_Call) RunAndReturn(run func(ctx context.Context, arg ValidateUsersCountParams) (int64, error)) *MockQuerier_ValidateUsersCount_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyUser provides a mock function for the type MockQuerier
func (_mock *MockQuerier) VerifyUser(ctx context.Context, id int64) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for VerifyUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockQuerier_VerifyUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyUser'
type MockQuerier_VerifyUser_Call struct {
	*mock.Call
}

// VerifyUser is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockQuerier_Expecter) VerifyUser(ctx interface{}, id interface{}) *MockQuerier_VerifyUser_Call {
	return &MockQuerier_VerifyUser_Call{Call: _e.mock.On("VerifyUser", ctx, id)}
}

func (_c *MockQuerier_VerifyUser_Call) Run(run func(ctx context.Context, id int64)) *MockQuerier_VerifyUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockQuerier_VerifyUser_Call) Return(err error) *MockQuerier_VerifyUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockQuerier_VerifyUser_Call) RunAndReturn(run func(ctx context.Context, id int64) error) *MockQuerier_VerifyUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStore creates a new instance of MockStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStore {
	mock := &MockStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockStore is an autogenerated mock type for the Store type
type MockStore struct {
	mock.Mock
}

type MockStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStore) EXPECT() *MockStore_Expecter {
	return &MockStore_Expecter{mock: &_m.Mock}
}

// ActivateUserTx provides a mock function for the type MockStore
func (_mock *MockStore) ActivateUserTx(ctx context.Context, arg ActivateUserTxParams) error {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for ActivateUserTx")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ActivateUserTxParams) error); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStore_ActivateUserTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ActivateUserTx'
type MockStore_ActivateUserTx_Call struct {
	*mock.Call
}

// ActivateUserTx is a helper method to define mock.On call
//   - ctx
//   - arg
func (_e *MockStore_Expecter) ActivateUserTx(ctx interface{}, arg interface{}) *MockStore_ActivateUserTx_Call {
	return &MockStore_ActivateUserTx_Call{Call: _e.mock.On("ActivateUserTx", ctx, arg)}
}

func (_c *MockStore_ActivateUserTx_Call) Run(run func(ctx context.Context, arg ActivateUserTxParams)) *MockStore_ActivateUserTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ActivateUserTxParams))
	})
	return _c
}

func (_c *MockStore_ActivateUserTx_Call) Return(err error) *MockStore_ActivateUserTx_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStore_ActivateUserTx_Call) RunAndReturn(run func(ctx context.Context, arg ActivateUserTxParams) error) *MockStore_ActivateUserTx_Call {
	_c.Call.Return(run)
	return _c
}

// AddBrandSocialLink provides a mock function for the type MockStore
func (_mock *MockStore) AddBrandSocialLink(ctx context.Context, arg AddBrandSocialLinkParams) (*BrandSocialLink, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for AddBrandSocialLink")
	}

	var r0 *BrandSocialLink
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, AddBrandSocialLinkParams) (*BrandSocialLink, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, AddBrandSocialLinkParams) *BrandSocialLink); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BrandSocialLink)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, AddBrandSocialLinkParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStore_AddBrandSocialLink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddBrandSocialLink'
type MockStore_AddBrandSocialLink_Call struct {
	*mock.Call
}

// AddBrandSocialLink is a helper method to define mock.On call
//   - ctx
//   - arg
func (_e *MockStore_Expecter) AddBrandSocialLink(ctx interface{}, arg interface{}) *MockStore_AddBrandSocialLink_Call {
	return &MockStore_AddBrandSocialLink_Call{Call: _e.mock.On("AddBrandSocialLink", ctx, arg)}
}

func (_c *MockStore_AddBrandSocialLink_Call) Run(run func(ctx context.Context, arg AddBrandSocialLinkParams)) *MockStore_AddBrandSocialLink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(AddBrandSocialLinkParams))
	})
	return _c
}

func (_c *MockStore_AddBrandSocialLink_Call) Return(brandSocialLink *BrandSocialLink, err error) *MockStore_AddBrandSocialLink_Call {
	_c.Call.Return(brandSocialLink, err)
	return _c
}

func (_c *MockStore_AddBrandSocialLink_Call) RunAndReturn(run func(ctx context.Context, arg AddBrandSocialLinkParams) (*BrandSocialLink, error)) *MockStore_AddBrandSocialLink_Call {
	_c.Call.Return(run)
	return _c
}

// AssignServiceToUser provides a mock function for the type MockStore
func (_mock *MockStore) AssignServiceToUser(ctx context.Context, arg AssignServiceToUserParams) error {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for AssignServiceToUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, AssignServiceToUserParams) error); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStore_AssignServiceToUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AssignServiceToUser'
type MockStore_AssignServiceToUser_Call struct {
	*mock.Call
}

// AssignServiceToUser is a helper method to define mock.On call
//   - ctx
//   - arg
func (_e *MockStore_Expecter) AssignServiceToUser(ctx interface{}, arg interface{}) *MockStore_AssignServiceToUser_Call {
	return &MockStore_AssignServiceToUser_Call{Call: _e.mock.On("AssignServiceToUser", ctx, arg)}
}

func (_c *MockStore_AssignServiceToUser_Call) Run(run func(ctx context.Context, arg AssignServiceToUserParams)) *MockStore_AssignServiceToUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(AssignServiceToUserParams))
	})
	return _c
}

func (_c *MockStore_AssignServiceToUser_Call) Return(err error) *MockStore_AssignServiceToUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStore_AssignServiceToUser_Call) RunAndReturn(run func(ctx context.Context, arg AssignServiceToUserParams) error) *MockStore_AssignServiceToUser_Call {
	_c.Call.Return(run)
	return _c
}

// AssociateUserWithBrand provides a mock function for the type MockStore
func (_mock *MockStore) AssociateUserWithBrand(ctx context.Context, arg AssociateUserWithBrandParams) error {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for AssociateUserWithBrand")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, AssociateUserWithBrandParams) error); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStore_AssociateUserWithBrand_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AssociateUserWithBrand'
type MockStore_AssociateUserWithBrand_Call struct {
	*mock.Call
}

// AssociateUserWithBrand is a helper method to define mock.On call
//   - ctx
//   - arg
func (_e *MockStore_Expecter) AssociateUserWithBrand(ctx interface{}, arg interface{}) *MockStore_AssociateUserWithBrand_Call {
	return &MockStore_AssociateUserWithBrand_Call{Call: _e.mock.On("AssociateUserWithBrand", ctx, arg)}
}

func (_c *MockStore_AssociateUserWithBrand_Call) Run(run func(ctx context.Context, arg AssociateUserWithBrandParams)) *MockStore_AssociateUserWithBrand_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(AssociateUserWithBrandParams))
	})
	return _c
}

func (_c *MockStore_AssociateUserWithBrand_Call) Return(err error) *MockStore_AssociateUserWithBrand_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStore_AssociateUserWithBrand_Call) RunAndReturn(run func(ctx context.Context, arg AssociateUserWithBrandParams) error) *MockStore_AssociateUserWithBrand_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBrand provides a mock function for the type MockStore
func (_mock *MockStore) CreateBrand(ctx context.Context, arg CreateBrandParams) (*Brand, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateBrand")
	}

	var r0 *Brand
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, CreateBrandParams) (*Brand, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, CreateBrandParams) *Brand); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Brand)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, CreateBrandParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStore_CreateBrand_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBrand'
type MockStore_CreateBrand_Call struct {
	*mock.Call
}

// CreateBrand is a helper method to define mock.On call
//   - ctx
//   - arg
func (_e *MockStore_Expecter) CreateBrand(ctx interface{}, arg interface{}) *MockStore_CreateBrand_Call {
	return &MockStore_CreateBrand_Call{Call: _e.mock.On("CreateBrand", ctx, arg)}
}

func (_c *MockStore_CreateBrand_Call) Run(run func(ctx context.Context, arg CreateBrandParams)) *MockStore_CreateBrand_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(CreateBrandParams))
	})
	return _c
}

func (_c *MockStore_CreateBrand_Call) Return(brand *Brand, err error) *MockStore_CreateBrand_Call {
	_c.Call.Return(brand, err)
	return _c
}

func (_c *MockStore_CreateBrand_Call) RunAndReturn(run func(ctx context.Context, arg CreateBrandParams) (*Brand, error)) *MockStore_CreateBrand_Call {
	_c.Call.Return(run)
	return _c
}

// CreateCustomer provides a mock function for the type MockStore
func (_mock *MockStore) CreateCustomer(ctx context.Context, arg CreateCustomerParams) (*Customer, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateCustomer")
	}

	var r0 *Customer
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, CreateCustomerParams) (*Customer, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, CreateCustomerParams) *Customer); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Customer)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, CreateCustomerParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStore_CreateCustomer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCustomer'
type MockStore_CreateCustomer_Call struct {
	*mock.Call
}

// CreateCustomer is a helper method to define mock.On call
//   - ctx
//   - arg
func (_e *MockStore_Expecter) CreateCustomer(ctx interface{}, arg interface{}) *MockStore_CreateCustomer_Call {
	return &MockStore_CreateCustomer_Call{Call: _e.mock.On("CreateCustomer", ctx, arg)}
}

func (_c *MockStore_CreateCustomer_Call) Run(run func(ctx context.Context, arg CreateCustomerParams)) *MockStore_CreateCustomer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(CreateCustomerParams))
	})
	return _c
}

func (_c *MockStore_CreateCustomer_Call) Return(customer *Customer, err error) *MockStore_CreateCustomer_Call {
	_c.Call.Return(customer, err)
	return _c
}

func (_c *MockStore_CreateCustomer_Call) RunAndReturn(run func(ctx context.Context, arg CreateCustomerParams) (*Customer, error)) *MockStore_CreateCustomer_Call {
	_c.Call.Return(run)
	return _c
}

// CreateService provides a mock function for the type MockStore
func (_mock *MockStore) CreateService(ctx context.Context, arg CreateServiceParams) (*Service, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateService")
	}

	var r0 *Service
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, CreateServiceParams) (*Service, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, CreateServiceParams) *Service); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Service)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, CreateServiceParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStore_CreateService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateService'
type MockStore_CreateService_Call struct {
	*mock.Call
}

// CreateService is a helper method to define mock.On call
//   - ctx
//   - arg
func (_e *MockStore_Expecter) CreateService(ctx interface{}, arg interface{}) *MockStore_CreateService_Call {
	return &MockStore_CreateService_Call{Call: _e.mock.On("CreateService", ctx, arg)}
}

func (_c *MockStore_CreateService_Call) Run(run func(ctx context.Context, arg CreateServiceParams)) *MockStore_CreateService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(CreateServiceParams))
	})
	return _c
}

func (_c *MockStore_CreateService_Call) Return(service *Service, err error) *MockStore_CreateService_Call {
	_c.Call.Return(service, err)
	return _c
}

func (_c *MockStore_CreateService_Call) RunAndReturn(run func(ctx context.Context, arg CreateServiceParams) (*Service, error)) *MockStore_CreateService_Call {
	_c.Call.Return(run)
	return _c
}

// CreateServiceTx provides a mock function for the type MockStore
func (_mock *MockStore) CreateServiceTx(ctx context.Context, arg CreateServiceTxParams) (CreateServiceTxResult, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateServiceTx")
	}

	var r0 CreateServiceTxResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, CreateServiceTxParams) (CreateServiceTxResult, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, CreateServiceTxParams) CreateServiceTxResult); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Get(0).(CreateServiceTxResult)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, CreateServiceTxParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStore_CreateServiceTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateServiceTx'
type MockStore_CreateServiceTx_Call struct {
	*mock.Call
}

// CreateServiceTx is a helper method to define mock.On call
//   - ctx
//   - arg
func (_e *MockStore_Expecter) CreateServiceTx(ctx interface{}, arg interface{}) *MockStore_CreateServiceTx_Call {
	return &MockStore_CreateServiceTx_Call{Call: _e.mock.On("CreateServiceTx", ctx, arg)}
}

func (_c *MockStore_CreateServiceTx_Call) Run(run func(ctx context.Context, arg CreateServiceTxParams)) *MockStore_CreateServiceTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(CreateServiceTxParams))
	})
	return _c
}

func (_c *MockStore_CreateServiceTx_Call) Return(createServiceTxResult CreateServiceTxResult, err error) *MockStore_CreateServiceTx_Call {
	_c.Call.Return(createServiceTxResult, err)
	return _c
}

func (_c *MockStore_CreateServiceTx_Call) RunAndReturn(run func(ctx context.Context, arg CreateServiceTxParams) (CreateServiceTxResult, error)) *MockStore_CreateServiceTx_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUser provides a mock function for the type MockStore
func (_mock *MockStore) CreateUser(ctx context.Context, arg CreateUserParams) (*User, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, CreateUserParams) (*User, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, CreateUserParams) *User); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, CreateUserParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStore_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockStore_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx
//   - arg
func (_e *MockStore_Expecter) CreateUser(ctx interface{}, arg interface{}) *MockStore_CreateUser_Call {
	return &MockStore_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, arg)}
}

func (_c *MockStore_CreateUser_Call) Run(run func(ctx context.Context, arg CreateUserParams)) *MockStore_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(CreateUserParams))
	})
	return _c
}

func (_c *MockStore_CreateUser_Call) Return(user *User, err error) *MockStore_CreateUser_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockStore_CreateUser_Call) RunAndReturn(run func(ctx context.Context, arg CreateUserParams) (*User, error)) *MockStore_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUserInvitation provides a mock function for the type MockStore
func (_mock *MockStore) CreateUserInvitation(ctx context.Context, arg CreateUserInvitationParams) error {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateUserInvitation")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, CreateUserInvitationParams) error); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStore_CreateUserInvitation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUserInvitation'
type MockStore_CreateUserInvitation_Call struct {
	*mock.Call
}

// CreateUserInvitation is a helper method to define mock.On call
//   - ctx
//   - arg
func (_e *MockStore_Expecter) CreateUserInvitation(ctx interface{}, arg interface{}) *MockStore_CreateUserInvitation_Call {
	return &MockStore_CreateUserInvitation_Call{Call: _e.mock.On("CreateUserInvitation", ctx, arg)}
}

func (_c *MockStore_CreateUserInvitation_Call) Run(run func(ctx context.Context, arg CreateUserInvitationParams)) *MockStore_CreateUserInvitation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(CreateUserInvitationParams))
	})
	return _c
}

func (_c *MockStore_CreateUserInvitation_Call) Return(err error) *MockStore_CreateUserInvitation_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStore_CreateUserInvitation_Call) RunAndReturn(run func(ctx context.Context, arg CreateUserInvitationParams) error) *MockStore_CreateUserInvitation_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteBrandSocialLink provides a mock function for the type MockStore
func (_mock *MockStore) DeleteBrandSocialLink(ctx context.Context, arg DeleteBrandSocialLinkParams) error {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBrandSocialLink")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, DeleteBrandSocialLinkParams) error); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStore_DeleteBrandSocialLink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteBrandSocialLink'
type MockStore_DeleteBrandSocialLink_Call struct {
	*mock.Call
}

// DeleteBrandSocialLink is a helper method to define mock.On call
//   - ctx
//   - arg
func (_e *MockStore_Expecter) DeleteBrandSocialLink(ctx interface{}, arg interface{}) *MockStore_DeleteBrandSocialLink_Call {
	return &MockStore_DeleteBrandSocialLink_Call{Call: _e.mock.On("DeleteBrandSocialLink", ctx, arg)}
}

func (_c *MockStore_DeleteBrandSocialLink_Call) Run(run func(ctx context.Context, arg DeleteBrandSocialLinkParams)) *MockStore_DeleteBrandSocialLink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(DeleteBrandSocialLinkParams))
	})
	return _c
}

func (_c *MockStore_DeleteBrandSocialLink_Call) Return(err error) *MockStore_DeleteBrandSocialLink_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStore_DeleteBrandSocialLink_Call) RunAndReturn(run func(ctx context.Context, arg DeleteBrandSocialLinkParams) error) *MockStore_DeleteBrandSocialLink_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCustomer provides a mock function for the type MockStore
func (_mock *MockStore) DeleteCustomer(ctx context.Context, id int64) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCustomer")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStore_DeleteCustomer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCustomer'
type MockStore_DeleteCustomer_Call struct {
	*mock.Call
}

// DeleteCustomer is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockStore_Expecter) DeleteCustomer(ctx interface{}, id interface{}) *MockStore_DeleteCustomer_Call {
	return &MockStore_DeleteCustomer_Call{Call: _e.mock.On("DeleteCustomer", ctx, id)}
}

func (_c *MockStore_DeleteCustomer_Call) Run(run func(ctx context.Context, id int64)) *MockStore_DeleteCustomer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockStore_DeleteCustomer_Call) Return(err error) *MockStore_DeleteCustomer_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStore_DeleteCustomer_Call) RunAndReturn(run func(ctx context.Context, id int64) error) *MockStore_DeleteCustomer_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteService provides a mock function for the type MockStore
func (_mock *MockStore) DeleteService(ctx context.Context, id uuid.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteService")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStore_DeleteService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteService'
type MockStore_DeleteService_Call struct {
	*mock.Call
}

// DeleteService is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockStore_Expecter) DeleteService(ctx interface{}, id interface{}) *MockStore_DeleteService_Call {
	return &MockStore_DeleteService_Call{Call: _e.mock.On("DeleteService", ctx, id)}
}

func (_c *MockStore_DeleteService_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockStore_DeleteService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockStore_DeleteService_Call) Return(err error) *MockStore_DeleteService_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStore_DeleteService_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) error) *MockStore_DeleteService_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function for the type MockStore
func (_mock *MockStore) DeleteUser(ctx context.Context, id int64) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStore_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type MockStore_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockStore_Expecter) DeleteUser(ctx interface{}, id interface{}) *MockStore_DeleteUser_Call {
	return &MockStore_DeleteUser_Call{Call: _e.mock.On("DeleteUser", ctx, id)}
}

func (_c *MockStore_DeleteUser_Call) Run(run func(ctx context.Context, id int64)) *MockStore_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockStore_DeleteUser_Call) Return(err error) *MockStore_DeleteUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStore_DeleteUser_Call) RunAndReturn(run func(ctx context.Context, id int64) error) *MockStore_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUserInvitation provides a mock function for the type MockStore
func (_mock *MockStore) DeleteUserInvitation(ctx context.Context, userID int64) error {
	ret := _mock.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUserInvitation")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = returnFunc(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStore_DeleteUserInvitation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUserInvitation'
type MockStore_DeleteUserInvitation_Call struct {
	*mock.Call
}

// DeleteUserInvitation is a helper method to define mock.On call
//   - ctx
//   - userID
func (_e *MockStore_Expecter) DeleteUserInvitation(ctx interface{}, userID interface{}) *MockStore_DeleteUserInvitation_Call {
	return &MockStore_DeleteUserInvitation_Call{Call: _e.mock.On("DeleteUserInvitation", ctx, userID)}
}

func (_c *MockStore_DeleteUserInvitation_Call) Run(run func(ctx context.Context, userID int64)) *MockStore_DeleteUserInvitation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockStore_DeleteUserInvitation_Call) Return(err error) *MockStore_DeleteUserInvitation_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStore_DeleteUserInvitation_Call) RunAndReturn(run func(ctx context.Context, userID int64) error) *MockStore_DeleteUserInvitation_Call {
	_c.Call.Return(run)
	return _c
}

// GetBrandById provides a mock function for the type MockStore
func (_mock *MockStore) GetBrandById(ctx context.Context, id int32) (*Brand, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetBrandById")
	}

	var r0 *Brand
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int32) (*Brand, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int32) *Brand); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Brand)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStore_GetBrandById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBrandById'
type MockStore_GetBrandById_Call struct {
	*mock.Call
}

// GetBrandById is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockStore_Expecter) GetBrandById(ctx interface{}, id interface{}) *MockStore_GetBrandById_Call {
	return &MockStore_GetBrandById_Call{Call: _e.mock.On("GetBrandById", ctx, id)}
}

func (_c *MockStore_GetBrandById_Call) Run(run func(ctx context.Context, id int32)) *MockStore_GetBrandById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *MockStore_GetBrandById_Call) Return(brand *Brand, err error) *MockStore_GetBrandById_Call {
	_c.Call.Return(brand, err)
	return _c
}

func (_c *MockStore_GetBrandById_Call) RunAndReturn(run func(ctx context.Context, id int32) (*Brand, error)) *MockStore_GetBrandById_Call {
	_c.Call.Return(run)
	return _c
}

// GetBrandByUrl provides a mock function for the type MockStore
func (_mock *MockStore) GetBrandByUrl(ctx context.Context, pageUrl string) (string, error) {
	ret := _mock.Called(ctx, pageUrl)

	if len(ret) == 0 {
		panic("no return value specified for GetBrandByUrl")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return returnFunc(ctx, pageUrl)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = returnFunc(ctx, pageUrl)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, pageUrl)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStore_GetBrandByUrl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBrandByUrl'
type MockStore_GetBrandByUrl_Call struct {
	*mock.Call
}

// GetBrandByUrl is a helper method to define mock.On call
//   - ctx
//   - pageUrl
func (_e *MockStore_Expecter) GetBrandByUrl(ctx interface{}, pageUrl interface{}) *MockStore_GetBrandByUrl_Call {
	return &MockStore_GetBrandByUrl_Call{Call: _e.mock.On("GetBrandByUrl", ctx, pageUrl)}
}

func (_c *MockStore_GetBrandByUrl_Call) Run(run func(ctx context.Context, pageUrl string)) *MockStore_GetBrandByUrl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockStore_GetBrandByUrl_Call) Return(s string, err error) *MockStore_GetBrandByUrl_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockStore_GetBrandByUrl_Call) RunAndReturn(run func(ctx context.Context, pageUrl string) (string, error)) *MockStore_GetBrandByUrl_Call {
	_c.Call.Return(run)
	return _c
}

// GetBrandProfile provides a mock function for the type MockStore
func (_mock *MockStore) GetBrandProfile(ctx context.Context, id int32) (*GetBrandProfileRow, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetBrandProfile")
	}

	var r0 *GetBrandProfileRow
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int32) (*GetBrandProfileRow, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int32) *GetBrandProfileRow); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetBrandProfileRow)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStore_GetBrandProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBrandProfile'
type MockStore_GetBrandProfile_Call struct {
	*mock.Call
}

// GetBrandProfile is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockStore_Expecter) GetBrandProfile(ctx interface{}, id interface{}) *MockStore_GetBrandProfile_Call {
	return &MockStore_GetBrandProfile_Call{Call: _e.mock.On("GetBrandProfile", ctx, id)}
}

func (_c *MockStore_GetBrandProfile_Call) Run(run func(ctx context.Context, id int32)) *MockStore_GetBrandProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *MockStore_GetBrandProfile_Call) Return(getBrandProfileRow *GetBrandProfileRow, err error) *MockStore_GetBrandProfile_Call {
	_c.Call.Return(getBrandProfileRow, err)
	return _c
}

func (_c *MockStore_GetBrandProfile_Call) RunAndReturn(run func(ctx context.Context, id int32) (*GetBrandProfileRow, error)) *MockStore_GetBrandProfile_Call {
	_c.Call.Return(run)
	return _c
}

// GetBrandUsers provides a mock function for the type MockStore
func (_mock *MockStore) GetBrandUsers(ctx context.Context, brandID sql.NullInt32) ([]*User, error) {
	ret := _mock.Called(ctx, brandID)

	if len(ret) == 0 {
		panic("no return value specified for GetBrandUsers")
	}

	var r0 []*User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, sql.NullInt32) ([]*User, error)); ok {
		return returnFunc(ctx, brandID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, sql.NullInt32) []*User); ok {
		r0 = returnFunc(ctx, brandID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, sql.NullInt32) error); ok {
		r1 = returnFunc(ctx, brandID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStore_GetBrandUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBrandUsers'
type MockStore_GetBrandUsers_Call struct {
	*mock.Call
}

// GetBrandUsers is a helper method to define mock.On call
//   - ctx
//   - brandID
func (_e *MockStore_Expecter) GetBrandUsers(ctx interface{}, brandID interface{}) *MockStore_GetBrandUsers_Call {
	return &MockStore_GetBrandUsers_Call{Call: _e.mock.On("GetBrandUsers", ctx, brandID)}
}

func (_c *MockStore_GetBrandUsers_Call) Run(run func(ctx context.Context, brandID sql.NullInt32)) *MockStore_GetBrandUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.NullInt32))
	})
	return _c
}

func (_c *MockStore_GetBrandUsers_Call) Return(users []*User, err error) *MockStore_GetBrandUsers_Call {
	_c.Call.Return(users, err)
	return _c
}

func (_c *MockStore_GetBrandUsers_Call) RunAndReturn(run func(ctx context.Context, brandID sql.NullInt32) ([]*User, error)) *MockStore_GetBrandUsers_Call {
	_c.Call.Return(run)
	return _c
}

// GetBrandWorkingHours provides a mock function for the type MockStore
func (_mock *MockStore) GetBrandWorkingHours(ctx context.Context, brandID int32) ([]*BrandWorkingHour, error) {
	ret := _mock.Called(ctx, brandID)

	if len(ret) == 0 {
		panic("no return value specified for GetBrandWorkingHours")
	}

	var r0 []*BrandWorkingHour
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int32) ([]*BrandWorkingHour, error)); ok {
		return returnFunc(ctx, brandID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int32) []*BrandWorkingHour); ok {
		r0 = returnFunc(ctx, brandID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*BrandWorkingHour)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = returnFunc(ctx, brandID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStore_GetBrandWorkingHours_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBrandWorkingHours'
type MockStore_GetBrandWorkingHours_Call struct {
	*mock.Call
}

// GetBrandWorkingHours is a helper method to define mock.On call
//   - ctx
//   - brandID
func (_e *MockStore_Expecter) GetBrandWorkingHours(ctx interface{}, brandID interface{}) *MockStore_GetBrandWorkingHours_Call {
	return &MockStore_GetBrandWorkingHours_Call{Call: _e.mock.On("GetBrandWorkingHours", ctx, brandID)}
}

func (_c *MockStore_GetBrandWorkingHours_Call) Run(run func(ctx context.Context, brandID int32)) *MockStore_GetBrandWorkingHours_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *MockStore_GetBrandWorkingHours_Call) Return(brandWorkingHours []*BrandWorkingHour, err error) *MockStore_GetBrandWorkingHours_Call {
	_c.Call.Return(brandWorkingHours, err)
	return _c
}

func (_c *MockStore_GetBrandWorkingHours_Call) RunAndReturn(run func(ctx context.Context, brandID int32) ([]*BrandWorkingHour, error)) *MockStore_GetBrandWorkingHours_Call {
	_c.Call.Return(run)
	return _c
}

// GetCustomerByEmail provides a mock function for the type MockStore
func (_mock *MockStore) GetCustomerByEmail(ctx context.Context, email string) (*Customer, error) {
	ret := _mock.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetCustomerByEmail")
	}

	var r0 *Customer
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*Customer, error)); ok {
		return returnFunc(ctx, email)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *Customer); ok {
		r0 = returnFunc(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Customer)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, email)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStore_GetCustomerByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCustomerByEmail'
type MockStore_GetCustomerByEmail_Call struct {
	*mock.Call
}

// GetCustomerByEmail is a helper method to define mock.On call
//   - ctx
//   - email
func (_e *MockStore_Expecter) GetCustomerByEmail(ctx interface{}, email interface{}) *MockStore_GetCustomerByEmail_Call {
	return &MockStore_GetCustomerByEmail_Call{Call: _e.mock.On("GetCustomerByEmail", ctx, email)}
}

func (_c *MockStore_GetCustomerByEmail_Call) Run(run func(ctx context.Context, email string)) *MockStore_GetCustomerByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockStore_GetCustomerByEmail_Call) Return(customer *Customer, err error) *MockStore_GetCustomerByEmail_Call {
	_c.Call.Return(customer, err)
	return _c
}

func (_c *MockStore_GetCustomerByEmail_Call) RunAndReturn(run func(ctx context.Context, email string) (*Customer, error)) *MockStore_GetCustomerByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetCustomerById provides a mock function for the type MockStore
func (_mock *MockStore) GetCustomerById(ctx context.Context, id int64) (*Customer, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetCustomerById")
	}

	var r0 *Customer
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) (*Customer, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) *Customer); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Customer)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStore_GetCustomerById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCustomerById'
type MockStore_GetCustomerById_Call struct {
	*mock.Call
}

// GetCustomerById is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockStore_Expecter) GetCustomerById(ctx interface{}, id interface{}) *MockStore_GetCustomerById_Call {
	return &MockStore_GetCustomerById_Call{Call: _e.mock.On("GetCustomerById", ctx, id)}
}

func (_c *MockStore_GetCustomerById_Call) Run(run func(ctx context.Context, id int64)) *MockStore_GetCustomerById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockStore_GetCustomerById_Call) Return(customer *Customer, err error) *MockStore_GetCustomerById_Call {
	_c.Call.Return(customer, err)
	return _c
}

func (_c *MockStore_GetCustomerById_Call) RunAndReturn(run func(ctx context.Context, id int64) (*Customer, error)) *MockStore_GetCustomerById_Call {
	_c.Call.Return(run)
	return _c
}

// GetService provides a mock function for the type MockStore
func (_mock *MockStore) GetService(ctx context.Context, id uuid.UUID) (*Service, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetService")
	}

	var r0 *Service
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*Service, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *Service); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Service)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStore_GetService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetService'
type MockStore_GetService_Call struct {
	*mock.Call
}

// GetService is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockStore_Expecter) GetService(ctx interface{}, id interface{}) *MockStore_GetService_Call {
	return &MockStore_GetService_Call{Call: _e.mock.On("GetService", ctx, id)}
}

func (_c *MockStore_GetService_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockStore_GetService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockStore_GetService_Call) Return(service *Service, err error) *MockStore_GetService_Call {
	_c.Call.Return(service, err)
	return _c
}

func (_c *MockStore_GetService_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*Service, error)) *MockStore_GetService_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByEmail provides a mock function for the type MockStore
func (_mock *MockStore) GetUserByEmail(ctx context.Context, email string) (*User, error) {
	ret := _mock.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmail")
	}

	var r0 *User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*User, error)); ok {
		return returnFunc(ctx, email)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *User); ok {
		r0 = returnFunc(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, email)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStore_GetUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByEmail'
type MockStore_GetUserByEmail_Call struct {
	*mock.Call
}

// GetUserByEmail is a helper method to define mock.On call
//   - ctx
//   - email
func (_e *MockStore_Expecter) GetUserByEmail(ctx interface{}, email interface{}) *MockStore_GetUserByEmail_Call {
	return &MockStore_GetUserByEmail_Call{Call: _e.mock.On("GetUserByEmail", ctx, email)}
}

func (_c *MockStore_GetUserByEmail_Call) Run(run func(ctx context.Context, email string)) *MockStore_GetUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockStore_GetUserByEmail_Call) Return(user *User, err error) *MockStore_GetUserByEmail_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockStore_GetUserByEmail_Call) RunAndReturn(run func(ctx context.Context, email string) (*User, error)) *MockStore_GetUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserById provides a mock function for the type MockStore
func (_mock *MockStore) GetUserById(ctx context.Context, id int64) (*User, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserById")
	}

	var r0 *User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) (*User, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) *User); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStore_GetUserById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserById'
type MockStore_GetUserById_Call struct {
	*mock.Call
}

// GetUserById is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockStore_Expecter) GetUserById(ctx interface{}, id interface{}) *MockStore_GetUserById_Call {
	return &MockStore_GetUserById_Call{Call: _e.mock.On("GetUserById", ctx, id)}
}

func (_c *MockStore_GetUserById_Call) Run(run func(ctx context.Context, id int64)) *MockStore_GetUserById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockStore_GetUserById_Call) Return(user *User, err error) *MockStore_GetUserById_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockStore_GetUserById_Call) RunAndReturn(run func(ctx context.Context, id int64) (*User, error)) *MockStore_GetUserById_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserFromInvitation provides a mock function for the type MockStore
func (_mock *MockStore) GetUserFromInvitation(ctx context.Context, token string) (int64, error) {
	ret := _mock.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for GetUserFromInvitation")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (int64, error)); ok {
		return returnFunc(ctx, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = returnFunc(ctx, token)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, token)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStore_GetUserFromInvitation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserFromInvitation'
type MockStore_GetUserFromInvitation_Call struct {
	*mock.Call
}

// GetUserFromInvitation is a helper method to define mock.On call
//   - ctx
//   - token
func (_e *MockStore_Expecter) GetUserFromInvitation(ctx interface{}, token interface{}) *MockStore_GetUserFromInvitation_Call {
	return &MockStore_GetUserFromInvitation_Call{Call: _e.mock.On("GetUserFromInvitation", ctx, token)}
}

func (_c *MockStore_GetUserFromInvitation_Call) Run(run func(ctx context.Context, token string)) *MockStore_GetUserFromInvitation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockStore_GetUserFromInvitation_Call) Return(n int64, err error) *MockStore_GetUserFromInvitation_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockStore_GetUserFromInvitation_Call) RunAndReturn(run func(ctx context.Context, token string) (int64, error)) *MockStore_GetUserFromInvitation_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsersByBrand provides a mock function for the type MockStore
func (_mock *MockStore) GetUsersByBrand(ctx context.Context, brandID sql.NullInt32) ([]*User, error) {
	ret := _mock.Called(ctx, brandID)

	if len(ret) == 0 {
		panic("no return value specified for GetUsersByBrand")
	}

	var r0 []*User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, sql.NullInt32) ([]*User, error)); ok {
		return returnFunc(ctx, brandID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, sql.NullInt32) []*User); ok {
		r0 = returnFunc(ctx, brandID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, sql.NullInt32) error); ok {
		r1 = returnFunc(ctx, brandID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStore_GetUsersByBrand_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsersByBrand'
type MockStore_GetUsersByBrand_Call struct {
	*mock.Call
}

// GetUsersByBrand is a helper method to define mock.On call
//   - ctx
//   - brandID
func (_e *MockStore_Expecter) GetUsersByBrand(ctx interface{}, brandID interface{}) *MockStore_GetUsersByBrand_Call {
	return &MockStore_GetUsersByBrand_Call{Call: _e.mock.On("GetUsersByBrand", ctx, brandID)}
}

func (_c *MockStore_GetUsersByBrand_Call) Run(run func(ctx context.Context, brandID sql.NullInt32)) *MockStore_GetUsersByBrand_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.NullInt32))
	})
	return _c
}

func (_c *MockStore_GetUsersByBrand_Call) Return(users []*User, err error) *MockStore_GetUsersByBrand_Call {
	_c.Call.Return(users, err)
	return _c
}

func (_c *MockStore_GetUsersByBrand_Call) RunAndReturn(run func(ctx context.Context, brandID sql.NullInt32) ([]*User, error)) *MockStore_GetUsersByBrand_Call {
	_c.Call.Return(run)
	return _c
}

// ListServices provides a mock function for the type MockStore
func (_mock *MockStore) ListServices(ctx context.Context, brandID int32) ([]*Service, error) {
	ret := _mock.Called(ctx, brandID)

	if len(ret) == 0 {
		panic("no return value specified for ListServices")
	}

	var r0 []*Service
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int32) ([]*Service, error)); ok {
		return returnFunc(ctx, brandID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int32) []*Service); ok {
		r0 = returnFunc(ctx, brandID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Service)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = returnFunc(ctx, brandID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStore_ListServices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListServices'
type MockStore_ListServices_Call struct {
	*mock.Call
}

// ListServices is a helper method to define mock.On call
//   - ctx
//   - brandID
func (_e *MockStore_Expecter) ListServices(ctx interface{}, brandID interface{}) *MockStore_ListServices_Call {
	return &MockStore_ListServices_Call{Call: _e.mock.On("ListServices", ctx, brandID)}
}

func (_c *MockStore_ListServices_Call) Run(run func(ctx context.Context, brandID int32)) *MockStore_ListServices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *MockStore_ListServices_Call) Return(services []*Service, err error) *MockStore_ListServices_Call {
	_c.Call.Return(services, err)
	return _c
}

func (_c *MockStore_ListServices_Call) RunAndReturn(run func(ctx context.Context, brandID int32) ([]*Service, error)) *MockStore_ListServices_Call {
	_c.Call.Return(run)
	return _c
}

// ListUserServices provides a mock function for the type MockStore
func (_mock *MockStore) ListUserServices(ctx context.Context, userID int64) ([]*Service, error) {
	ret := _mock.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for ListUserServices")
	}

	var r0 []*Service
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) ([]*Service, error)); ok {
		return returnFunc(ctx, userID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) []*Service); ok {
		r0 = returnFunc(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Service)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = returnFunc(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStore_ListUserServices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUserServices'
type MockStore_ListUserServices_Call struct {
	*mock.Call
}

// ListUserServices is a helper method to define mock.On call
//   - ctx
//   - userID
func (_e *MockStore_Expecter) ListUserServices(ctx interface{}, userID interface{}) *MockStore_ListUserServices_Call {
	return &MockStore_ListUserServices_Call{Call: _e.mock.On("ListUserServices", ctx, userID)}
}

func (_c *MockStore_ListUserServices_Call) Run(run func(ctx context.Context, userID int64)) *MockStore_ListUserServices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockStore_ListUserServices_Call) Return(services []*Service, err error) *MockStore_ListUserServices_Call {
	_c.Call.Return(services, err)
	return _c
}

func (_c *MockStore_ListUserServices_Call) RunAndReturn(run func(ctx context.Context, userID int64) ([]*Service, error)) *MockStore_ListUserServices_Call {
	_c.Call.Return(run)
	return _c
}

// ListVisibleServices provides a mock function for the type MockStore
func (_mock *MockStore) ListVisibleServices(ctx context.Context, brandID int32) ([]*Service, error) {
	ret := _mock.Called(ctx, brandID)

	if len(ret) == 0 {
		panic("no return value specified for ListVisibleServices")
	}

	var r0 []*Service
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int32) ([]*Service, error)); ok {
		return returnFunc(ctx, brandID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int32) []*Service); ok {
		r0 = returnFunc(ctx, brandID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Service)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = returnFunc(ctx, brandID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStore_ListVisibleServices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListVisibleServices'
type MockStore_ListVisibleServices_Call struct {
	*mock.Call
}

// ListVisibleServices is a helper method to define mock.On call
//   - ctx
//   - brandID
func (_e *MockStore_Expecter) ListVisibleServices(ctx interface{}, brandID interface{}) *MockStore_ListVisibleServices_Call {
	return &MockStore_ListVisibleServices_Call{Call: _e.mock.On("ListVisibleServices", ctx, brandID)}
}

func (_c *MockStore_ListVisibleServices_Call) Run(run func(ctx context.Context, brandID int32)) *MockStore_ListVisibleServices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *MockStore_ListVisibleServices_Call) Return(services []*Service, err error) *MockStore_ListVisibleServices_Call {
	_c.Call.Return(services, err)
	return _c
}

func (_c *MockStore_ListVisibleServices_Call) RunAndReturn(run func(ctx context.Context, brandID int32) ([]*Service, error)) *MockStore_ListVisibleServices_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveServiceFromUser provides a mock function for the type MockStore
func (_mock *MockStore) RemoveServiceFromUser(ctx context.Context, arg RemoveServiceFromUserParams) error {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for RemoveServiceFromUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, RemoveServiceFromUserParams) error); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStore_RemoveServiceFromUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveServiceFromUser'
type MockStore_RemoveServiceFromUser_Call struct {
	*mock.Call
}

// RemoveServiceFromUser is a helper method to define mock.On call
//   - ctx
//   - arg
func (_e *MockStore_Expecter) RemoveServiceFromUser(ctx interface{}, arg interface{}) *MockStore_RemoveServiceFromUser_Call {
	return &MockStore_RemoveServiceFromUser_Call{Call: _e.mock.On("RemoveServiceFromUser", ctx, arg)}
}

func (_c *MockStore_RemoveServiceFromUser_Call) Run(run func(ctx context.Context, arg RemoveServiceFromUserParams)) *MockStore_RemoveServiceFromUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(RemoveServiceFromUserParams))
	})
	return _c
}

func (_c *MockStore_RemoveServiceFromUser_Call) Return(err error) *MockStore_RemoveServiceFromUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStore_RemoveServiceFromUser_Call) RunAndReturn(run func(ctx context.Context, arg RemoveServiceFromUserParams) error) *MockStore_RemoveServiceFromUser_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateBrand provides a mock function for the type MockStore
func (_mock *MockStore) UpdateBrand(ctx context.Context, arg UpdateBrandParams) (*Brand, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBrand")
	}

	var r0 *Brand
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, UpdateBrandParams) (*Brand, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, UpdateBrandParams) *Brand); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Brand)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, UpdateBrandParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStore_UpdateBrand_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateBrand'
type MockStore_UpdateBrand_Call struct {
	*mock.Call
}

// UpdateBrand is a helper method to define mock.On call
//   - ctx
//   - arg
func (_e *MockStore_Expecter) UpdateBrand(ctx interface{}, arg interface{}) *MockStore_UpdateBrand_Call {
	return &MockStore_UpdateBrand_Call{Call: _e.mock.On("UpdateBrand", ctx, arg)}
}

func (_c *MockStore_UpdateBrand_Call) Run(run func(ctx context.Context, arg UpdateBrandParams)) *MockStore_UpdateBrand_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(UpdateBrandParams))
	})
	return _c
}

func (_c *MockStore_UpdateBrand_Call) Return(brand *Brand, err error) *MockStore_UpdateBrand_Call {
	_c.Call.Return(brand, err)
	return _c
}

func (_c *MockStore_UpdateBrand_Call) RunAndReturn(run func(ctx context.Context, arg UpdateBrandParams) (*Brand, error)) *MockStore_UpdateBrand_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateBrandPartial provides a mock function for the type MockStore
func (_mock *MockStore) UpdateBrandPartial(ctx context.Context, arg UpdateBrandPartialParams) (*Brand, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBrandPartial")
	}

	var r0 *Brand
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, UpdateBrandPartialParams) (*Brand, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, UpdateBrandPartialParams) *Brand); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Brand)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, UpdateBrandPartialParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStore_UpdateBrandPartial_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateBrandPartial'
type MockStore_UpdateBrandPartial_Call struct {
	*mock.Call
}

// UpdateBrandPartial is a helper method to define mock.On call
//   - ctx
//   - arg
func (_e *MockStore_Expecter) UpdateBrandPartial(ctx interface{}, arg interface{}) *MockStore_UpdateBrandPartial_Call {
	return &MockStore_UpdateBrandPartial_Call{Call: _e.mock.On("UpdateBrandPartial", ctx, arg)}
}

func (_c *MockStore_UpdateBrandPartial_Call) Run(run func(ctx context.Context, arg UpdateBrandPartialParams)) *MockStore_UpdateBrandPartial_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(UpdateBrandPartialParams))
	})
	return _c
}

func (_c *MockStore_UpdateBrandPartial_Call) Return(brand *Brand, err error) *MockStore_UpdateBrandPartial_Call {
	_c.Call.Return(brand, err)
	return _c
}

func (_c *MockStore_UpdateBrandPartial_Call) RunAndReturn(run func(ctx context.Context, arg UpdateBrandPartialParams) (*Brand, error)) *MockStore_UpdateBrandPartial_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateBrandWorkingHours provides a mock function for the type MockStore
func (_mock *MockStore) UpdateBrandWorkingHours(ctx context.Context, arg UpdateBrandWorkingHoursParams) (*BrandWorkingHour, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBrandWorkingHours")
	}

	var r0 *BrandWorkingHour
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, UpdateBrandWorkingHoursParams) (*BrandWorkingHour, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, UpdateBrandWorkingHoursParams) *BrandWorkingHour); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BrandWorkingHour)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, UpdateBrandWorkingHoursParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStore_UpdateBrandWorkingHours_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateBrandWorkingHours'
type MockStore_UpdateBrandWorkingHours_Call struct {
	*mock.Call
}

// UpdateBrandWorkingHours is a helper method to define mock.On call
//   - ctx
//   - arg
func (_e *MockStore_Expecter) UpdateBrandWorkingHours(ctx interface{}, arg interface{}) *MockStore_UpdateBrandWorkingHours_Call {
	return &MockStore_UpdateBrandWorkingHours_Call{Call: _e.mock.On("UpdateBrandWorkingHours", ctx, arg)}
}

func (_c *MockStore_UpdateBrandWorkingHours_Call) Run(run func(ctx context.Context, arg UpdateBrandWorkingHoursParams)) *MockStore_UpdateBrandWorkingHours_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(UpdateBrandWorkingHoursParams))
	})
	return _c
}

func (_c *MockStore_UpdateBrandWorkingHours_Call) Return(brandWorkingHour *BrandWorkingHour, err error) *MockStore_UpdateBrandWorkingHours_Call {
	_c.Call.Return(brandWorkingHour, err)
	return _c
}

func (_c *MockStore_UpdateBrandWorkingHours_Call) RunAndReturn(run func(ctx context.Context, arg UpdateBrandWorkingHoursParams) (*BrandWorkingHour, error)) *MockStore_UpdateBrandWorkingHours_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateService provides a mock function for the type MockStore
func (_mock *MockStore) UpdateService(ctx context.Context, arg UpdateServiceParams) (*Service, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateService")
	}

	var r0 *Service
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, UpdateServiceParams) (*Service, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, UpdateServiceParams) *Service); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Service)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, UpdateServiceParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStore_UpdateService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateService'
type MockStore_UpdateService_Call struct {
	*mock.Call
}

// UpdateService is a helper method to define mock.On call
//   - ctx
//   - arg
func (_e *MockStore_Expecter) UpdateService(ctx interface{}, arg interface{}) *MockStore_UpdateService_Call {
	return &MockStore_UpdateService_Call{Call: _e.mock.On("UpdateService", ctx, arg)}
}

func (_c *MockStore_UpdateService_Call) Run(run func(ctx context.Context, arg UpdateServiceParams)) *MockStore_UpdateService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(UpdateServiceParams))
	})
	return _c
}

func (_c *MockStore_UpdateService_Call) Return(service *Service, err error) *MockStore_UpdateService_Call {
	_c.Call.Return(service, err)
	return _c
}

func (_c *MockStore_UpdateService_Call) RunAndReturn(run func(ctx context.Context, arg UpdateServiceParams) (*Service, error)) *MockStore_UpdateService_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateUsersCount provides a mock function for the type MockStore
func (_mock *MockStore) ValidateUsersCount(ctx context.Context, arg ValidateUsersCountParams) (int64, error) {
	ret := _mock.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for ValidateUsersCount")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ValidateUsersCountParams) (int64, error)); ok {
		return returnFunc(ctx, arg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ValidateUsersCountParams) int64); ok {
		r0 = returnFunc(ctx, arg)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ValidateUsersCountParams) error); ok {
		r1 = returnFunc(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStore_ValidateUsersCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateUsersCount'
type MockStore_ValidateUsersCount_Call struct {
	*mock.Call
}

// ValidateUsersCount is a helper method to define mock.On call
//   - ctx
//   - arg
func (_e *MockStore_Expecter) ValidateUsersCount(ctx interface{}, arg interface{}) *MockStore_ValidateUsersCount_Call {
	return &MockStore_ValidateUsersCount_Call{Call: _e.mock.On("ValidateUsersCount", ctx, arg)}
}

func (_c *MockStore_ValidateUsersCount_Call) Run(run func(ctx context.Context, arg ValidateUsersCountParams)) *MockStore_ValidateUsersCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ValidateUsersCountParams))
	})
	return _c
}

func (_c *MockStore_ValidateUsersCount_Call) Return(n int64, err error) *MockStore_ValidateUsersCount_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockStore_ValidateUsersCount_Call) RunAndReturn(run func(ctx context.Context, arg ValidateUsersCountParams) (int64, error)) *MockStore_ValidateUsersCount_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyUser provides a mock function for the type MockStore
func (_mock *MockStore) VerifyUser(ctx context.Context, id int64) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for VerifyUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStore_VerifyUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyUser'
type MockStore_VerifyUser_Call struct {
	*mock.Call
}

// VerifyUser is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockStore_Expecter) VerifyUser(ctx interface{}, id interface{}) *MockStore_VerifyUser_Call {
	return &MockStore_VerifyUser_Call{Call: _e.mock.On("VerifyUser", ctx, id)}
}

func (_c *MockStore_VerifyUser_Call) Run(run func(ctx context.Context, id int64)) *MockStore_VerifyUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockStore_VerifyUser_Call) Return(err error) *MockStore_VerifyUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStore_VerifyUser_Call) RunAndReturn(run func(ctx context.Context, id int64) error) *MockStore_VerifyUser_Call {
	_c.Call.Return(run)
	return _c
}
