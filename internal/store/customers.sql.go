// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: customers.sql

package store

import (
	"context"
	"database/sql"
)

const createCustomer = `-- name: CreateCustomer :one
INSERT INTO customers (name, email, password, phone_number, brand_id) VALUES ($1, $2, $3, $4, $5)
RETURNING id, name, email, password, phone_number, brand_id, created_at, updated_at
`

type CreateCustomerParams struct {
	Name        string         `json:"name"`
	Email       string         `json:"email"`
	Password    []byte         `json:"password"`
	PhoneNumber sql.NullString `json:"phoneNumber"`
	BrandID     int32          `json:"brandId"`
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) (*Customer, error) {
	row := q.db.QueryRowContext(ctx, createCustomer,
		arg.Name,
		arg.Email,
		arg.Password,
		arg.PhoneNumber,
		arg.BrandID,
	)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.PhoneNumber,
		&i.BrandID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const deleteCustomer = `-- name: DeleteCustomer :exec
DELETE FROM customers WHERE id = $1
`

func (q *Queries) DeleteCustomer(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCustomer, id)
	return err
}

const getCustomerByEmail = `-- name: GetCustomerByEmail :one
SELECT id, name, email, password, phone_number, brand_id, created_at, updated_at FROM customers WHERE email = $1
`

func (q *Queries) GetCustomerByEmail(ctx context.Context, email string) (*Customer, error) {
	row := q.db.QueryRowContext(ctx, getCustomerByEmail, email)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.PhoneNumber,
		&i.BrandID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getCustomerById = `-- name: GetCustomerById :one
SELECT id, name, email, password, phone_number, brand_id, created_at, updated_at FROM customers WHERE id = $1
`

func (q *Queries) GetCustomerById(ctx context.Context, id int64) (*Customer, error) {
	row := q.db.QueryRowContext(ctx, getCustomerById, id)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.PhoneNumber,
		&i.BrandID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
