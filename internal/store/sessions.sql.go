// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: sessions.sql

package store

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createCustomerSession = `-- name: CreateCustomerSession :one
INSERT INTO customer_sessions (customer_id, expires_at)
VALUES ($1, $2)
RETURNING id, customer_id, expires_at
`

type CreateCustomerSessionParams struct {
	CustomerID int64     `json:"customerId"`
	ExpiresAt  time.Time `json:"expiresAt"`
}

func (q *Queries) CreateCustomerSession(ctx context.Context, arg CreateCustomerSessionParams) (*CustomerSession, error) {
	row := q.db.QueryRowContext(ctx, createCustomerSession, arg.CustomerID, arg.ExpiresAt)
	var i CustomerSession
	err := row.Scan(&i.ID, &i.CustomerID, &i.ExpiresAt)
	return &i, err
}

const createUserSession = `-- name: CreateUserSession :one
INSERT INTO user_sessions (user_id, expires_at)
VALUES ($1, $2)
RETURNING id, user_id, expires_at
`

type CreateUserSessionParams struct {
	UserID    int64     `json:"userId"`
	ExpiresAt time.Time `json:"expiresAt"`
}

func (q *Queries) CreateUserSession(ctx context.Context, arg CreateUserSessionParams) (*UserSession, error) {
	row := q.db.QueryRowContext(ctx, createUserSession, arg.UserID, arg.ExpiresAt)
	var i UserSession
	err := row.Scan(&i.ID, &i.UserID, &i.ExpiresAt)
	return &i, err
}

const getCustomerSessionById = `-- name: GetCustomerSessionById :one
SELECT id, customer_id, expires_at FROM customer_sessions WHERE id = $1
`

func (q *Queries) GetCustomerSessionById(ctx context.Context, id uuid.UUID) (*CustomerSession, error) {
	row := q.db.QueryRowContext(ctx, getCustomerSessionById, id)
	var i CustomerSession
	err := row.Scan(&i.ID, &i.CustomerID, &i.ExpiresAt)
	return &i, err
}

const getSessionByCustomerId = `-- name: GetSessionByCustomerId :one
SELECT id, customer_id, expires_at FROM customer_sessions WHERE customer_id = $1
`

func (q *Queries) GetSessionByCustomerId(ctx context.Context, customerID int64) (*CustomerSession, error) {
	row := q.db.QueryRowContext(ctx, getSessionByCustomerId, customerID)
	var i CustomerSession
	err := row.Scan(&i.ID, &i.CustomerID, &i.ExpiresAt)
	return &i, err
}

const getSessionByUserId = `-- name: GetSessionByUserId :one
SELECT id, user_id, expires_at FROM user_sessions WHERE user_id = $1
`

func (q *Queries) GetSessionByUserId(ctx context.Context, userID int64) (*UserSession, error) {
	row := q.db.QueryRowContext(ctx, getSessionByUserId, userID)
	var i UserSession
	err := row.Scan(&i.ID, &i.UserID, &i.ExpiresAt)
	return &i, err
}

const getUserSessionById = `-- name: GetUserSessionById :one
SELECT id, user_id, expires_at FROM user_sessions WHERE id = $1
`

func (q *Queries) GetUserSessionById(ctx context.Context, id uuid.UUID) (*UserSession, error) {
	row := q.db.QueryRowContext(ctx, getUserSessionById, id)
	var i UserSession
	err := row.Scan(&i.ID, &i.UserID, &i.ExpiresAt)
	return &i, err
}

const updateCustomerSession = `-- name: UpdateCustomerSession :one
UPDATE customer_sessions
SET expires_at = $2
WHERE id = $1
RETURNING id, customer_id, expires_at
`

type UpdateCustomerSessionParams struct {
	ID        uuid.UUID `json:"id"`
	ExpiresAt time.Time `json:"expiresAt"`
}

func (q *Queries) UpdateCustomerSession(ctx context.Context, arg UpdateCustomerSessionParams) (*CustomerSession, error) {
	row := q.db.QueryRowContext(ctx, updateCustomerSession, arg.ID, arg.ExpiresAt)
	var i CustomerSession
	err := row.Scan(&i.ID, &i.CustomerID, &i.ExpiresAt)
	return &i, err
}

const updateUserSession = `-- name: UpdateUserSession :one
UPDATE user_sessions
SET expires_at = $2
WHERE id = $1
RETURNING id, user_id, expires_at
`

type UpdateUserSessionParams struct {
	ID        uuid.UUID `json:"id"`
	ExpiresAt time.Time `json:"expiresAt"`
}

func (q *Queries) UpdateUserSession(ctx context.Context, arg UpdateUserSessionParams) (*UserSession, error) {
	row := q.db.QueryRowContext(ctx, updateUserSession, arg.ID, arg.ExpiresAt)
	var i UserSession
	err := row.Scan(&i.ID, &i.UserID, &i.ExpiresAt)
	return &i, err
}
