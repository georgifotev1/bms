// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package store

import (
	"context"
	"database/sql"

	"github.com/lib/pq"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (name, email, password, role, verified, brand_id) VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, name, email, password, avatar, verified, created_at, updated_at, brand_id, role
`

type CreateUserParams struct {
	Name     string        `json:"name"`
	Email    string        `json:"email"`
	Password []byte        `json:"-"`
	Role     string        `json:"role"`
	Verified bool          `json:"verified"`
	BrandID  sql.NullInt32 `json:"brandId"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (*User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Name,
		arg.Email,
		arg.Password,
		arg.Role,
		arg.Verified,
		arg.BrandID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Avatar,
		&i.Verified,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.BrandID,
		&i.Role,
	)
	return &i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, email, password, avatar, verified, created_at, updated_at, brand_id, role FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (*User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Avatar,
		&i.Verified,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.BrandID,
		&i.Role,
	)
	return &i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, name, email, password, avatar, verified, created_at, updated_at, brand_id, role FROM users WHERE id = $1
`

func (q *Queries) GetUserById(ctx context.Context, id int64) (*User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Avatar,
		&i.Verified,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.BrandID,
		&i.Role,
	)
	return &i, err
}

const getUsersByBrand = `-- name: GetUsersByBrand :many
SELECT id, name, email, password, avatar, verified, created_at, updated_at, brand_id, role FROM users WHERE brand_id = $1
`

func (q *Queries) GetUsersByBrand(ctx context.Context, brandID sql.NullInt32) ([]*User, error) {
	rows, err := q.db.QueryContext(ctx, getUsersByBrand, brandID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Password,
			&i.Avatar,
			&i.Verified,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.BrandID,
			&i.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const validateUsersCount = `-- name: ValidateUsersCount :one
SELECT COUNT(*) FROM users
WHERE id = ANY($1::bigint[]) AND brand_id = $2
`

type ValidateUsersCountParams struct {
	Ids     []int64       `json:"ids"`
	BrandID sql.NullInt32 `json:"brandId"`
}

func (q *Queries) ValidateUsersCount(ctx context.Context, arg ValidateUsersCountParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, validateUsersCount, pq.Array(arg.Ids), arg.BrandID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const verifyUser = `-- name: VerifyUser :exec
UPDATE users SET
verified = TRUE,
updated_at = NOW()
WHERE id = $1
`

func (q *Queries) VerifyUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, verifyUser, id)
	return err
}
