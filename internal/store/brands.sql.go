// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: brands.sql

package store

import (
	"context"
	"database/sql"
	"time"
)

const addBrandSocialLink = `-- name: AddBrandSocialLink :one
INSERT INTO brand_social_link (
    brand_id, platform, url, display_name
) VALUES (
    $1, $2, $3, $4
) RETURNING id, brand_id, platform, url, display_name, created_at, updated_at
`

type AddBrandSocialLinkParams struct {
	BrandID     int32          `json:"brandId"`
	Platform    string         `json:"platform"`
	Url         string         `json:"url"`
	DisplayName sql.NullString `json:"displayName"`
}

func (q *Queries) AddBrandSocialLink(ctx context.Context, arg AddBrandSocialLinkParams) (*BrandSocialLink, error) {
	row := q.db.QueryRowContext(ctx, addBrandSocialLink,
		arg.BrandID,
		arg.Platform,
		arg.Url,
		arg.DisplayName,
	)
	var i BrandSocialLink
	err := row.Scan(
		&i.ID,
		&i.BrandID,
		&i.Platform,
		&i.Url,
		&i.DisplayName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const associateUserWithBrand = `-- name: AssociateUserWithBrand :one
UPDATE users SET brand_id = $1 WHERE id = $2 RETURNING id, name, email, password, avatar, verified, created_at, updated_at, brand_id, role
`

type AssociateUserWithBrandParams struct {
	BrandID sql.NullInt32 `json:"brandId"`
	ID      int64         `json:"id"`
}

func (q *Queries) AssociateUserWithBrand(ctx context.Context, arg AssociateUserWithBrandParams) (*User, error) {
	row := q.db.QueryRowContext(ctx, associateUserWithBrand, arg.BrandID, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Avatar,
		&i.Verified,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.BrandID,
		&i.Role,
	)
	return &i, err
}

const createBrand = `-- name: CreateBrand :one
INSERT INTO brand (name, page_url)
VALUES ($1, $2) RETURNING id, name, page_url, description, email, phone, country, state, zip_code, city, address, logo_url, banner_url, currency, created_at, updated_at
`

type CreateBrandParams struct {
	Name    string `json:"name"`
	PageUrl string `json:"pageUrl"`
}

func (q *Queries) CreateBrand(ctx context.Context, arg CreateBrandParams) (*Brand, error) {
	row := q.db.QueryRowContext(ctx, createBrand, arg.Name, arg.PageUrl)
	var i Brand
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PageUrl,
		&i.Description,
		&i.Email,
		&i.Phone,
		&i.Country,
		&i.State,
		&i.ZipCode,
		&i.City,
		&i.Address,
		&i.LogoUrl,
		&i.BannerUrl,
		&i.Currency,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const deleteBrandSocialLink = `-- name: DeleteBrandSocialLink :exec
DELETE FROM brand_social_link WHERE id = $1 AND brand_id = $2
`

type DeleteBrandSocialLinkParams struct {
	ID      int32 `json:"id"`
	BrandID int32 `json:"brandId"`
}

func (q *Queries) DeleteBrandSocialLink(ctx context.Context, arg DeleteBrandSocialLinkParams) error {
	_, err := q.db.ExecContext(ctx, deleteBrandSocialLink, arg.ID, arg.BrandID)
	return err
}

const getBrandProfile = `-- name: GetBrandProfile :one
SELECT
    b.id, b.name, b.page_url, b.description, b.email, b.phone, b.country, b.state, b.zip_code, b.city, b.address, b.logo_url, b.banner_url, b.currency, b.created_at, b.updated_at,
    COALESCE(
        (SELECT json_agg(sl) FROM brand_social_link sl WHERE sl.brand_id = b.id),
        '[]'
    ) AS social_links,
    COALESCE(
        (SELECT json_agg(wh) FROM brand_working_hours wh WHERE wh.brand_id = b.id),
        '[]'
    ) AS working_hours
FROM brand b
WHERE b.id = $1
`

type GetBrandProfileRow struct {
	ID           int32          `json:"id"`
	Name         string         `json:"name"`
	PageUrl      string         `json:"pageUrl"`
	Description  sql.NullString `json:"description"`
	Email        sql.NullString `json:"email"`
	Phone        sql.NullString `json:"phone"`
	Country      sql.NullString `json:"country"`
	State        sql.NullString `json:"state"`
	ZipCode      sql.NullString `json:"zipCode"`
	City         sql.NullString `json:"city"`
	Address      sql.NullString `json:"address"`
	LogoUrl      sql.NullString `json:"logoUrl"`
	BannerUrl    sql.NullString `json:"bannerUrl"`
	Currency     sql.NullString `json:"currency"`
	CreatedAt    time.Time      `json:"createdAt"`
	UpdatedAt    time.Time      `json:"updatedAt"`
	SocialLinks  interface{}    `json:"socialLinks"`
	WorkingHours interface{}    `json:"workingHours"`
}

func (q *Queries) GetBrandProfile(ctx context.Context, id int32) (*GetBrandProfileRow, error) {
	row := q.db.QueryRowContext(ctx, getBrandProfile, id)
	var i GetBrandProfileRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PageUrl,
		&i.Description,
		&i.Email,
		&i.Phone,
		&i.Country,
		&i.State,
		&i.ZipCode,
		&i.City,
		&i.Address,
		&i.LogoUrl,
		&i.BannerUrl,
		&i.Currency,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.SocialLinks,
		&i.WorkingHours,
	)
	return &i, err
}

const getBrandUsers = `-- name: GetBrandUsers :many
SELECT id, name, email, password, avatar, verified, created_at, updated_at, brand_id, role FROM users WHERE brand_id = $1
`

func (q *Queries) GetBrandUsers(ctx context.Context, brandID sql.NullInt32) ([]*User, error) {
	rows, err := q.db.QueryContext(ctx, getBrandUsers, brandID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Password,
			&i.Avatar,
			&i.Verified,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.BrandID,
			&i.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBrandWorkingHours = `-- name: GetBrandWorkingHours :many
SELECT id, brand_id, day_of_week, open_time, close_time, is_closed, created_at, updated_at FROM brand_working_hours
WHERE brand_id = $1
ORDER BY day_of_week
`

func (q *Queries) GetBrandWorkingHours(ctx context.Context, brandID int32) ([]*BrandWorkingHour, error) {
	rows, err := q.db.QueryContext(ctx, getBrandWorkingHours, brandID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*BrandWorkingHour
	for rows.Next() {
		var i BrandWorkingHour
		if err := rows.Scan(
			&i.ID,
			&i.BrandID,
			&i.DayOfWeek,
			&i.OpenTime,
			&i.CloseTime,
			&i.IsClosed,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBrand = `-- name: UpdateBrand :one
UPDATE brand
SET name = $1,
    page_url = $2,
    description = $3,
    email = $4,
    phone = $5,
    country = $6,
    state = $7,
    zip_code = $8,
    city = $9,
    address = $10,
    logo_url = $11,
    banner_url = $12,
    currency = $13,
    updated_at = NOW()
WHERE id = $14
RETURNING id, name, page_url, description, email, phone, country, state, zip_code, city, address, logo_url, banner_url, currency, created_at, updated_at
`

type UpdateBrandParams struct {
	Name        string         `json:"name"`
	PageUrl     string         `json:"pageUrl"`
	Description sql.NullString `json:"description"`
	Email       sql.NullString `json:"email"`
	Phone       sql.NullString `json:"phone"`
	Country     sql.NullString `json:"country"`
	State       sql.NullString `json:"state"`
	ZipCode     sql.NullString `json:"zipCode"`
	City        sql.NullString `json:"city"`
	Address     sql.NullString `json:"address"`
	LogoUrl     sql.NullString `json:"logoUrl"`
	BannerUrl   sql.NullString `json:"bannerUrl"`
	Currency    sql.NullString `json:"currency"`
	ID          int32          `json:"id"`
}

func (q *Queries) UpdateBrand(ctx context.Context, arg UpdateBrandParams) (*Brand, error) {
	row := q.db.QueryRowContext(ctx, updateBrand,
		arg.Name,
		arg.PageUrl,
		arg.Description,
		arg.Email,
		arg.Phone,
		arg.Country,
		arg.State,
		arg.ZipCode,
		arg.City,
		arg.Address,
		arg.LogoUrl,
		arg.BannerUrl,
		arg.Currency,
		arg.ID,
	)
	var i Brand
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PageUrl,
		&i.Description,
		&i.Email,
		&i.Phone,
		&i.Country,
		&i.State,
		&i.ZipCode,
		&i.City,
		&i.Address,
		&i.LogoUrl,
		&i.BannerUrl,
		&i.Currency,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const updateBrandPartial = `-- name: UpdateBrandPartial :one
UPDATE brand
SET
    name = COALESCE($1, name),
    page_url = COALESCE($2, page_url),
    description = COALESCE($3, description),
    email = COALESCE($4, email),
    phone = COALESCE($5, phone),
    country = COALESCE($6, country),
    state = COALESCE($7, state),
    zip_code = COALESCE($8, zip_code),
    city = COALESCE($9, city),
    address = COALESCE($10, address),
    logo_url = COALESCE($11, logo_url),
    banner_url = COALESCE($12, banner_url),
    currency = COALESCE($13, currency),
    updated_at = NOW()
WHERE id = $14
RETURNING id, name, page_url, description, email, phone, country, state, zip_code, city, address, logo_url, banner_url, currency, created_at, updated_at
`

type UpdateBrandPartialParams struct {
	Name        sql.NullString `json:"name"`
	PageUrl     sql.NullString `json:"pageUrl"`
	Description sql.NullString `json:"description"`
	Email       sql.NullString `json:"email"`
	Phone       sql.NullString `json:"phone"`
	Country     sql.NullString `json:"country"`
	State       sql.NullString `json:"state"`
	ZipCode     sql.NullString `json:"zipCode"`
	City        sql.NullString `json:"city"`
	Address     sql.NullString `json:"address"`
	LogoUrl     sql.NullString `json:"logoUrl"`
	BannerUrl   sql.NullString `json:"bannerUrl"`
	Currency    sql.NullString `json:"currency"`
	ID          int32          `json:"id"`
}

func (q *Queries) UpdateBrandPartial(ctx context.Context, arg UpdateBrandPartialParams) (*Brand, error) {
	row := q.db.QueryRowContext(ctx, updateBrandPartial,
		arg.Name,
		arg.PageUrl,
		arg.Description,
		arg.Email,
		arg.Phone,
		arg.Country,
		arg.State,
		arg.ZipCode,
		arg.City,
		arg.Address,
		arg.LogoUrl,
		arg.BannerUrl,
		arg.Currency,
		arg.ID,
	)
	var i Brand
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PageUrl,
		&i.Description,
		&i.Email,
		&i.Phone,
		&i.Country,
		&i.State,
		&i.ZipCode,
		&i.City,
		&i.Address,
		&i.LogoUrl,
		&i.BannerUrl,
		&i.Currency,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const updateBrandWorkingHours = `-- name: UpdateBrandWorkingHours :one
INSERT INTO brand_working_hours (
    brand_id, day_of_week, open_time, close_time, is_closed
) VALUES (
    $1, $2, $3, $4, $5
) ON CONFLICT (brand_id, day_of_week) DO UPDATE
SET open_time = EXCLUDED.open_time,
    close_time = EXCLUDED.close_time,
    is_closed = EXCLUDED.is_closed,
    updated_at = NOW()
RETURNING id, brand_id, day_of_week, open_time, close_time, is_closed, created_at, updated_at
`

type UpdateBrandWorkingHoursParams struct {
	BrandID   int32        `json:"brandId"`
	DayOfWeek int32        `json:"dayOfWeek"`
	OpenTime  sql.NullTime `json:"openTime"`
	CloseTime sql.NullTime `json:"closeTime"`
	IsClosed  sql.NullBool `json:"isClosed"`
}

func (q *Queries) UpdateBrandWorkingHours(ctx context.Context, arg UpdateBrandWorkingHoursParams) (*BrandWorkingHour, error) {
	row := q.db.QueryRowContext(ctx, updateBrandWorkingHours,
		arg.BrandID,
		arg.DayOfWeek,
		arg.OpenTime,
		arg.CloseTime,
		arg.IsClosed,
	)
	var i BrandWorkingHour
	err := row.Scan(
		&i.ID,
		&i.BrandID,
		&i.DayOfWeek,
		&i.OpenTime,
		&i.CloseTime,
		&i.IsClosed,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
